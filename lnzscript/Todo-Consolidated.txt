
Focus and Purpose
	
	- running without saving. useful for one-off scripts using the clipboard
	- save time on repeated tasks, through automation.
	- working with files, specifically batch renaming, making shortcuts. don't need to type 'import os, system,shutil' like Python
	
	Unique: JavaScript with @'string'
	Also: The JavaScript language can be useful for functional programming.

Changes from 0.3 to 0.4
	Installer
		Drag/drop onto script
		you can give script parameters. test.jsz arg1
		
	Lnz Language changes
		File.dirListFiles() now accepts a pattern like '*.txt'
		
		Enumerated types
			File.getPathSpecial
			File.openExplorerWindowSpecial
			System.openControlPanel
			, and to a lesser extent Window.setState
			changed to use enum. types ControlPanel,ControlPanelXp,SpecialFolder, and WindowStyle
			User would type System.openControlPanel(ControlPanel.Keyboard)
		
		<std> library
			array objects no longer have prototype methods. (they were making it difficult to loop over arrays with "for (var index in arr)"
			Math.shuffleArray() added, same as former Array.Shuffle
			
		File.copyMany, renamed from File.copyDialog to indicate that it is useful copying whole directories or *.txt file patterns.
		File.pathJoin, File.pathSplit added
	
	Editor changes
		Running commands are not sent with 4 arguments "" "" "" "", and parameters still work.
			Automatically add the properties $(1) $(2) $(3) $(4) to all commands. This is slightly better than having the command string be 
				"foo.exe $(File) $(1) $(2) $(3) $(4)", in which case spaces in params break
				"foo.exe $(File) "$(1)" "$(2)" "$(3)" "$(4)"", in which case empty params are always sent, and quotes .
			currently, command is just
				"foo.exe $(File), and the args are appended here. Quotes don't break it, but backslashes and other chars can.
				for example, a parameter test\test works, but test\ breaks it, Escaping cmd is not trivial, ^ is the true escape char
				Refer to 
			This is a hack because it's appended to all commands run; if there were a "compile" command one wouldn't want this behavior
	
	Other changes
		When an error in untitled doc, output pane won't link to the temporary file
		Dialog.input, when getting text from user, focus goes to the input field intially. This is important.
		
		examples directory contains some examples
		examples on wiki http://code.google.com/p/launchorz/wiki/
	
	
	Trivial changes
		document  System.windowsVersion(); includes win7
		references to previous googlepages.com website updated.
		references to previous googlepages.com website updated in docviewer.exe
		Window info tool always in Tools menu
		untitled.tmp.js renamed to untitled.tmp.jsz
		File.getShortcutTarget and others from QT, changed format from c:/foo to c:\foo 
		Fixed uninitialized data bug in File.copyDialog
		Clipboard.getText, increased buffer so that it can get more text.
		lnzscript.exe foo.jsz runs, instead of lnzscript.exe /f foo.jsz 


Should address in next version 0.4.1?
	Documentation, add blog examples to wiki, improve the docs and tutorials.
	.toAscii() is used improperly?-- you need the QByteArray instance so that the memory won't be freed?
		But the c++ should hold this temporary. this needs to be looked into.
		see the change to lnzconsole.cpp, g_LnzScriptPrintCallback
		This can repro'd when trying to print very long strings!
	an even better behavior: two verbs, open and edit. double-click will edit. drag/drop into will run. right-click:run to run.
	when double-clicking a .jsz, a black cmd line opens while it runs, which probably isn't desirable.
	
	Command-line escaping is less trivial than I thought.
		This not only effects parameters in lnzeditor, but perhaps many things running different processes to pass data.
		^ is the true escape character.
		http://stackoverflow.com/questions/251557/escape-angle-brackets-in-a-windows-command-prompt
		http://webcache.googleusercontent.com/search?q=cache:MS28vtWRm7EJ:www.eightypercent.net/Archive/2004/12/05.html+windows+command+line+quote+escape&cd=5&hl=en&ct=clnk&gl=us&client=firefox-a
	
	Language
		add an assert. assert = function(b) { if (!b) throw 'assertion failed'; return true;}
			doesn't work because  gives line number 0; not useful.
		
		maybe enumerate System.openUtility
		document WindowStyle more
	
		add: File.moveDirectory
		File.dirWalk - to make recursing through directories easier. use python's algorithms?
		Renaming, perhaps a renameNumbered for the common 01, 02, 03 renaming scenario
	
	dev environment-make working directories clear, clear up build process, and build doc process
	Make editor.exe more visible when you download it? -- since in the start menu, ok.
	Use qsrand() to seed rng. strangely, the 1st generated seems similar. QDateTime::currentDateTime().toTime_t() and qsrand?
	print() itself  has a small buffer...
	different return code if syntax error?
	File.tray should be system.cdTray
	@"test" is green. intentional?
	rename everything to .jsz rather than .js
	
	Better shortcut. Today's File.createShortcut fails when giving an argument like 'notepad.exe file.txt'; it quotes the whole thing.
		Need a com object to do this properly, or use vbs scripting...
		Probably easiest to use a freeware tool like http://optimumx.com/download/#Shortcut 
	
	Not sure if the scite-msg utility for sending doc text to scite works in win64, or if it matters


Probably for later release
	Internet.downloadURL. Wget-like URL retrieval would be nice. Options: 
		Python + py2exe
			(Around 1Mb)
			Current choice, because I already know it
			Also, I get zip file support nearly for free
		QtNetwork4.dll
			(1.215Mb)
			Less flexible, don't know it
		Libcurl
		What is ahk's implementation?
		Non-option - distribute w/ au3 and call it
	setEnvironmentvar
	better build env, maybe templates in subfolder instead of sources, write internal docs so that it could make sense
	@'cool' string literals could contain newlines. the processor would just turn it into \r\n

Maybe for a later release
	more rename methods, possibly, like a regexp
	CallDll, depending on how hard it is to implement (see ahk src?)
	getDirectorySize
	update scite version... not worth it now
	Python can call LnzScript (extension/subprocess), LnzScript can call Python?
	
	Add more of autohotkey's code, features. could it be a backend to everything?
	
	
	We could add the following features by having a python tool. (best if a py2exe'd exe)
		ftp
		wget-like file retrieval. http sending via post/get. could automate some things that way.
		zip file (but qt also supports zip)
	
	a printerr to send to stderr
	a directory Dialog, not really worth it
	
	Interact with IE/firefox bookmarks
	
	Registr.readKey - provide way to tell reason for failure - key ? value ? type of value?
	File.driveMapAdd - provide way to tell reason for failure
	AU3_ControlTreeView, for interacting w treeviews, apparently isn't provided by the dll...
	AU3_RunAsSet, AU3_PixelChecksum, might not be used
	getDriveType (cdrom, removable
	DriveGetFileSystem (FAT, NTFS
	MemGetStats  - Retrieves memory related information.
	
	get hash using win api. requires shapi lib,
	http://weseetips.com/2008/06/27/how-to-generate-the-hash-key-of-given-data/
	// Get file icon: http://weseetips.com/2008/06/03/how-to-get-the-icon-of-a-file/#comments
	// Get program from extension: http://weseetips.com/2008/05/30/how-to-find-the-application-associated-with-particular-file-extension/
	

More unit tests...
	Test relative coords, MouseCoordMode, PixelCoordMode
	Test registry read and write, ones that return array
	
Note that we probably don't want to introduce a dependency on the large QtGui.dll
	Can use winapi (wincommondialog.exe) for msgbox, input, file dialogs. 
	SmartWin and Ultimate++, at least with default themes, look ugly.
	



