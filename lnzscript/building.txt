Requirements:
Install Python 2.5 or greater.
Install Mingw/GCC. See url below.
Install Qt 4.4 Open Source Edition for mingw

==Setup==
Qt 4.6.3 requires Mingw 4.4, which I was able to find at the
TDM project site archives. 
http://tdm-gcc.tdragon.net/download
Under sourceforge downloads,
tdm-mingw-1.905.0-4.4.0-2.exe, 26mb

edit build.bat to point to your Python directory.

==Building LnzScript==

1)
Open the "Qt command prompt" , set directory to /trunk/lnzscript/
(The qt bin and gcc must be in the path, so I recommend the qt command prompt that comes with Qt)

2)
Run "qmake lnzconsole.pro" 
Ignore the warnings about files not being found. These files are generated by a python script.

3) 
run build.bat, which should do the rest. This runs Python scripts that create c++ to be compiled.

4) If there were not errors, the "release" or "debug" directory will contain the binary lnzconsole.exe. 
Rename this to lnzscript.exe and move it into the editor's directory.

The easiest way to run this is to copy it into the directory of a 
previous release of LnzScript.
(This way, the binary will have all of its dependencies including qt dlls, wincommondialog.exe, mingw.dll and so on).


==documentation.xml===
/doc/buildxmldoc.bat
creates documentation.xml

	documentation.xml and viewdoc.xsl -> /doc/html, for documentation.
	lnzeditor\app\configuration\build_api_file\build.bat
		uses documentation.xml to produce lnzscript.api
	lnzdoc.xml used by docviewer.exe, if in same directory


==Building other projects==
Many other scripts depend on documentation.xml.
Building the editor can be done as described in its readme.
First build Scintilla, then build Scite.
I use MSVC 2005 to build the editor.

==Internal docs==
QtScript is used as the JavaScript interpreter.
Functions are implemented in /lnzscript/provide_script/source
At build time the .cpp files are processed by a Python script, which extracts metadata/documentation,
and places output .cpp files into /lnzscript/provide_script/gen
This is done in order to have:

- Inline documentation
- Argument checking. QtScript function calls are not type-checked, but by providing metadata about the types expected, the Python script will automatically generate checks that the incoming arguments are valid.
- All functions automatically exposed to JavaScript.
- Documentation generation. A Python script creates a .xml file from the source.

In more detail, every "exposed-\*.cpp" file in source is processed, and cpp code is generated. This code is placed into one of the .cpp.template files to create the final .cpp output.

On a smaller scale, a similar step occurs for the JavaScript library. The JavaScript files are in /lnzscript/script/provide , and a Python script at build time consolidates them to a single std.js file in the output directory.




