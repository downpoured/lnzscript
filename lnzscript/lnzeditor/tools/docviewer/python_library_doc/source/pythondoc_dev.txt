
===Section:Development & Debugging======
===Mod:timeit======
===ModDoc:====
This module provides a simple way to time small bits of Python code. It has both
command line as well as callable interfaces.  It avoids a number of common traps
for measuring execution times.  See also Tim Peters' introduction to the
"Algorithms" chapter in the Python Cookbook, published by O'Reilly.
===EndDoc===
.. function:: Timer([stmt='pass' [, setup='pass' [, timer=<timer function>]]])

   Class for timing execution speed of small code snippets.

   The constructor takes a statement to be timed, an additional statement used for
   setup, and a timer function.  Both statements default to ``'pass'``; the timer
   function is platform-dependent (see the module doc string).  The statements may
   contain newlines, as long as they don't contain multi-line string literals.

   To measure the execution time of the first statement, use the :meth:`timeit`
   method.  The :meth:`repeat` method is a convenience to call :meth:`timeit`
   multiple times and return a list of results.

   .. versionchanged:: 2.6
      The *stmt* and *setup* parameters can now also take objects that are callable
      without arguments. This will embed calls to them in a timer function that will
      then be executed by :meth:`timeit`.  Note that the timing overhead is a little
      larger in this case because of the extra function calls.


.. method:: Timer.print_exc([file=None])

   Helper to print a traceback from the timed code.

   Typical use::

      t = Timer(...)       # outside the try/except
      try:
          t.timeit(...)    # or t.repeat(...)
      except:
          t.print_exc()

   The advantage over the standard traceback is that source lines in the compiled
   template will be displayed. The optional *file* argument directs where the
   traceback is sent; it defaults to ``sys.stderr``.


.. method:: Timer.repeat([repeat=3 [, number=1000000]])

   Call :meth:`timeit` a few times.

   This is a convenience function that calls the :meth:`timeit` repeatedly,
   returning a list of results.  The first argument specifies how many times to
   call :meth:`timeit`.  The second argument specifies the *number* argument for
   :func:`timeit`.

   .. note::

      It's tempting to calculate mean and standard deviation from the result vector
      and report these.  However, this is not very useful.  In a typical case, the
      lowest value gives a lower bound for how fast your machine can run the given
      code snippet; higher values in the result vector are typically not caused by
      variability in Python's speed, but by other processes interfering with your
      timing accuracy.  So the :func:`min` of the result is probably the only number
      you should be interested in.  After that, you should look at the entire vector
      and apply common sense rather than statistics.


.. method:: Timer.timeit([number=1000000])

   Time *number* executions of the main statement. This executes the setup
   statement once, and then returns the time it takes to execute the main statement
   a number of times, measured in seconds as a float.  The argument is the number
   of times through the loop, defaulting to one million.  The main statement, the
   setup statement and the timer function to be used are passed to the constructor.

   .. note::

      By default, :meth:`timeit` temporarily turns off :term:`garbage collection`
      during the timing.  The advantage of this approach is that it makes
      independent timings more comparable.  This disadvantage is that GC may be
      an important component of the performance of the function being measured.
      If so, GC can be re-enabled as the first statement in the *setup* string.
      For example::

         timeit.Timer('for i in xrange(10): oct(i)', 'gc.enable()').timeit()

.. function:: repeat(stmt[, setup[, timer[, repeat=3 [, number=1000000]]]])

   Create a :class:`Timer` instance with the given statement, setup code and timer
   function and run its :meth:`repeat` method with the given repeat count and
   *number* executions.

   .. versionadded:: 2.6


.. function:: timeit(stmt[, setup[, timer[, number=1000000]]])

   Create a :class:`Timer` instance with the given statement, setup code and timer
   function and run its :meth:`timeit` method with *number* executions.

   .. versionadded:: 2.6

.. function:: (examples)

Here are two example sessions (one using the command line, one using the module
interface) that compare the cost of using :func:`hasattr` vs.
:keyword:`try`/:keyword:`except` to test for missing and present object
attributes. ::

   % timeit.py 'try:' '  str.__nonzero__' 'except AttributeError:' '  pass'
   100000 loops, best of 3: 15.7 usec per loop
   % timeit.py 'if hasattr(str, "__nonzero__"): pass'
   100000 loops, best of 3: 4.26 usec per loop
   % timeit.py 'try:' '  int.__nonzero__' 'except AttributeError:' '  pass'
   1000000 loops, best of 3: 1.43 usec per loop
   % timeit.py 'if hasattr(int, "__nonzero__"): pass'
   100000 loops, best of 3: 2.23 usec per loop

::

   >>> import timeit
   >>> s = """\
   ... try:
   ...     str.__nonzero__
   ... except AttributeError:
   ...     pass
   ... """
   >>> t = timeit.Timer(stmt=s)
   >>> print "%.2f usec/pass" % (1000000 * t.timeit(number=100000)/100000)
   17.09 usec/pass
   >>> s = """\
   ... if hasattr(str, '__nonzero__'): pass
   ... """
   >>> t = timeit.Timer(stmt=s)
   >>> print "%.2f usec/pass" % (1000000 * t.timeit(number=100000)/100000)
   4.85 usec/pass
   >>> s = """\
   ... try:
   ...     int.__nonzero__
   ... except AttributeError:
   ...     pass
   ... """
   >>> t = timeit.Timer(stmt=s)
   >>> print "%.2f usec/pass" % (1000000 * t.timeit(number=100000)/100000)
   1.97 usec/pass
   >>> s = """\
   ... if hasattr(int, '__nonzero__'): pass
   ... """
   >>> t = timeit.Timer(stmt=s)
   >>> print "%.2f usec/pass" % (1000000 * t.timeit(number=100000)/100000)
   3.15 usec/pass

To give the :mod:`timeit` module access to functions you define, you can pass a
``setup`` parameter which contains an import statement::

   def test():
       "Stupid test function"
       L = []
       for i in range(100):
           L.append(i)

   if __name__=='__main__':
       from timeit import Timer
       t = Timer("test()", "from __main__ import test")
       print t.timeit()


===Mod:trace======
===ModDoc:====
The :mod:`trace` module allows you to trace program execution, generate
annotated statement coverage listings, print caller/callee relationships and
list functions executed during a program run.  It can be used in another program
or from the command line.

This is a simple example showing the use of this module::

   import sys
   import trace

   # create a Trace object, telling it what to ignore, and whether to
   # do tracing or line-counting or both.
   tracer = trace.Trace(
       ignoredirs=[sys.prefix, sys.exec_prefix],
       trace=0,
       count=1)

   # run the new command using the given tracer
   tracer.run('main()')

   # make a report, placing output in /tmp
   r = tracer.results()
   r.write_results(show_missing=True, coverdir="/tmp")

===EndDoc===
.. function:: Trace([count=1[, trace=1[, countfuncs=0[, countcallers=0[, ignoremods=()[, ignoredirs=()[, infile=None[, outfile=None[, timing=False]]]]]]]]])

   Create an object to trace execution of a single statement or expression. All
   parameters are optional.  *count* enables counting of line numbers. *trace*
   enables line execution tracing.  *countfuncs* enables listing of the functions
   called during the run.  *countcallers* enables call relationship tracking.
   *ignoremods* is a list of modules or packages to ignore.  *ignoredirs* is a list
   of directories whose modules or packages should be ignored.  *infile* is the
   file from which to read stored count information.  *outfile* is a file in which
   to write updated count information. *timing* enables a timestamp relative
   to when tracing was started to be displayed.


.. method:: Trace.run(cmd)

   Run *cmd* under control of the Trace object with the current tracing parameters.


.. method:: Trace.runctx(cmd[, globals=None[, locals=None]])

   Run *cmd* under control of the Trace object with the current tracing parameters
   in the defined global and local environments.  If not defined, *globals* and
   *locals* default to empty dictionaries.


.. method:: Trace.runfunc(func, *args, **kwds)

   Call *func* with the given arguments under control of the :class:`Trace` object
   with the current tracing parameters.


===Mod:pydoc======
===ModDoc:====
===EndDoc===
// .. function:: (To add later)

===Mod:doctest======
===ModDoc:====
===EndDoc===
// .. function:: (To add later)

===Mod:unittest======
===ModDoc:====
===EndDoc===
// .. function:: (To add later)

===Mod:test======
===ModDoc:====
===EndDoc===
// .. function:: (To add later)

===Mod:bdb======
===ModDoc:====
===EndDoc===
// .. function:: (To add later)

===Mod:pdb======
===ModDoc:====
===EndDoc===
// .. function:: (To add later)

===Mod:profile======
===ModDoc:====
===EndDoc===
// .. function:: (To add later)

===Mod:hotshot======
===ModDoc:====
===EndDoc===
// .. function:: (To add later)

