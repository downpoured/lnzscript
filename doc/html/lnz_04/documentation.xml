<?xml version="1.0" encoding="UTF-8"?><?xml-stylesheet type="text/xsl" href="viewdoc.xsl"?><launchorzdoc version="0.4"><section name="Launchorz"><namespace name="Clipboard"><namespace_doc>These methods can interact with the Windows clipboard.</namespace_doc><function name="clear" args="" returns="bool bStatus" impl="c++_nircmd"><doc>Clear contents of the clipboard.</doc></function><function name="getText" args="" returns="string strText" impl="c++_au3"><doc>Gets text from the clipboard. Returns false if clipboard is empty.</doc></function><function name="saveImage" args="string strImageFilename" returns="bool bStatus" impl="c++_nircmd"><doc>If there is an image in the clipboard, save image to a file. The following file formats are supported: .bmp, .gif, .jpg, .png, .tiff.</doc></function><function name="setText" args="string strText" returns="" impl="c++_au3"><doc>Sets text of clipboard.</doc></function></namespace><namespace name="Control"><namespace_doc>Let&apos;s say you want a script to simulate clicking a button on a dialog. There are different ways one could approach this. One might measure the position of the button and use Mouse.move and Mouse.click to click at those coordinates, but this method is somewhat fragile - if the dialog is moved slightly, it could end up clicking somewhere unintended. A good choice is to find a keyboard shortcut for this, and simulate the keypress using Keyboard.send. If there is not a keyboard shortcut, though, or you want greater control you will have to use one of the Control methods.[[br]]Control methods can interact with a control (button, text field, and so on) on a form. One typically uses a tool to find the ID and/or class of the control. Two such tools are packaged with LnzScript - look in the &quot;windowinfo&quot; and &quot;winexp&quot; directories. An even better tool is distributed with AutoIt, if you happen to have that installed. These tools can give information about controls. [[br]]Control methods generally take &quot;string window&quot; as a parameter - see above section for what this refers to. </namespace_doc><function name="click" args="string strWindow, string strControl, string strBtn=&quot;left&quot;, int nClicks=1, int x=default, int y=default" returns="" impl="c++_au3"><doc>Send simulated mouse click to control. Optionally specify button, number of clicks, or position of click (defaulting to center). Specify a control in one of three ways: ClassName (e.g. &quot;Button&quot;, or &quot;Button3&quot; for the third Button control), Text (e.g. &quot;OK&quot; or &quot;&amp;Next&quot; for a button with the text Next, with underlined N), or Control ID (e.g. 350, can be found with tools like Window Info Tool / spy).</doc></function><function name="dialogClickButton" args="string strExecutableName, string strWindowTitle, string strButtonNameOrId" returns="" impl="c++_nircmd"><doc>Allows you to interact with standard dialog-boxes and message-boxes of Windows. Use &quot;&quot; for exe name, window to refer to current dialog. Button names include yes, no, ok, cancel, retry, ignore, close, help, or provide an ID. Won&apos;t always work for non-standard dialog-boxes.</doc></function><function name="dialogSetText" args="string strExecutableName, string strWindowTitle, string strFieldId, string strText" returns="" impl="c++_nircmd"><doc>Allows you to enter text into standard dialog-boxes and message-boxes of Windows. Use &quot;&quot; for exe name, window to refer to current dialog. Won&apos;t always work for non-standard dialog-boxes.</doc><example>Control.dialogSetText(&apos;explorer.exe&apos;,&apos;run&apos;,12298,&apos;notepad.exe&apos;); /*type in notepad in run dialog*/ Control.dialogClickButton(&apos;explorer.exe&apos;,&apos;run&apos;,&apos;ok&apos;);//click ok</example></function><function name="exists" args="string strWindow, string strControl" returns="bool bExists" impl="c++_au3"><doc>Determines if a control exists. Specify a control in one of three ways: ClassName (e.g. &quot;Button&quot;, or &quot;Button3&quot; for the third Button control), Text (e.g. &quot;OK&quot; or &quot;&amp;Next&quot; for a button with the text Next, with underlined N), or Control ID (e.g. 350, can be found with tools like Window Info Tool / spy).</doc></function><function name="getDimensions" args="string strWindow, string strControl" returns="int width, int height" impl="c++_au3"><doc>Gets dimensions of control on form.</doc></function><function name="getHandle" args="string strWindow, string strControl" returns="string strHandle" impl="c++_au3"><doc>Get internal handle of a control. Result is returned as a string, or null if control is not found.</doc></function><function name="getPosition" args="string strWindow, string strControl" returns="int x, int y" impl="c++_au3"><doc>Gets position of control on form.</doc></function><function name="getText" args="string strWindow, string strControl" returns="string strControlText" impl="c++_au3"><doc>Retrieves the text from a control. Up to 16K can be retrieved.</doc></function><function name="move" args="string strWindow, string strControl, int x, int y, int width=-1, int height=-1" returns="bool bSuccess" impl="c++_au3"><doc>Moves a control. You can optionally provide a new width and height to move and resize in one step.</doc></function><function name="resize" args="string strWindow, string strControl, int width, int height" returns="bool bSuccess" impl="c++_au3"><doc>Resizes a control.</doc></function><function name="sendCommand" args="string strWindow, string strControl, string strCommand, string strArgument=&quot;&quot;" returns="string strResult" impl="c++_au3"><doc>Send command to a control. Result is returned as a string, unless the value is 0 in which case it is returned as the integer 0.  strArgument is an additional argument to send to the control. Common commands include: [[br]]&quot;IsVisible&quot; 	Returns 1 if visible, 0 otherwise [[br]]&quot;IsEnabled&quot; 	Returns 1 if enabled, 0 otherwise [[br]]&quot;ShowDropDown&quot; 	Drops a ComboBox [[br]]&quot;HideDropDown&quot; 	Undrops a ComboBox [[br]]&quot;AddString&quot;, &apos;string&apos; Adds a string to the end in a ListBox or ComboBox [[br]]&quot;DelString&quot;, occurrence Deletes a string according to occurrence in a ListBox or ComboBox [[br]]&quot;FindString&quot;, &apos;string&apos; Returns occurrence ref of the exact string in a ListBox or ComboBox [[br]]&quot;SetCurrentSelection&quot;, occurrence Sets selection to occurrence ref in a ListBox or ComboBox [[br]]&quot;SelectString&quot;, &apos;string&apos; Sets selection according to string in a ListBox or ComboBox [[br]]&quot;IsChecked&quot; 	Returns 1 if Button is checked, 0 otherwise [[br]]&quot;Check&quot; 	Checks radio or check Button [[br]]&quot;UnCheck&quot; 	Unchecks radio or check Button [[br]]&quot;GetCurrentLine&quot; 	Returns the line # where the caret is in an Edit [[br]]&quot;GetCurrentCol&quot; 	Returns the column # where the caret is in an Edit [[br]]&quot;GetCurrentSelection&quot; 	Returns name of the currently selected item in a ListBox or ComboBox [[br]]&quot;GetLineCount&quot; 	Returns # of lines in an Edit [[br]]&quot;GetLine&quot;, line# Returns text at line # passed of an Edit [[br]]&quot;GetSelected&quot; 	Returns selected text of an Edit [[br]]&quot;EditPaste&quot;, &apos;string&apos; Pastes the &apos;string&apos; at the Edit&apos;s caret position [[br]]&quot;CurrentTab&quot; 	Returns the current Tab shown of a SysTabControl32 [[br]]&quot;TabRight&quot; 	Moves to the next tab to the right of a SysTabControl32 [[br]]&quot;TabLeft&quot; 	Moves to the next tab to the left of a SysTabControl32.</doc><example>if (Control.sendCommand(&quot;Untitled&quot;, &quot;Button2&quot;, &quot;IsChecked&quot;)) print (&apos;it is checked&apos;); print(&apos;contents of line 3 are:&apos;+Control.sendCommand(&quot;Untitled&quot;,&quot;Edit1&quot;, &quot;GetLine&quot;, &quot;3&quot;));</example></function><function name="sendCommandListview" args="string strWindow, string strCtrl, string strCmd, string strArg=&quot;&quot;, string strArg2=&quot;&quot;" returns="string strResult" impl="c++_au3"><doc>Sends a command to a ListView32 control. All indices are 0 based (first item referenced by 0 and so on). Some commands take two arguments. In a &quot;Details&quot; view, the &quot;item&quot; is the &quot;row&quot; and the &quot;subitem&quot; is the &quot;column&quot;. Commands include: [[br]]&quot;DeSelect&quot;, From [, To] 	Deselects one or more items. [[br]]&quot;FindItem&quot;, &quot;string to find&quot; [, SubItem] 	Returns the item index of the string. Returns -1 if the string is not found. [[br]]&quot;GetItemCount&quot; 	Returns the number of list items. [[br]]&quot;GetSelected&quot; [, option]	Returns a string containing the item index of selected items. If option=0 (default) only the first selected item is returned. If option=1 then all the selected items are returned delimited by |, e.g: &quot;0|3|4|10&quot;. If no items are selected a blank &quot;&quot; string is returned. [[br]]&quot;GetSelectedCount&quot; 	Returns the number of items that are selected. [[br]]&quot;GetSubItemCount&quot; 	Returns the number of subitems. [[br]]&quot;GetText&quot;, Item, SubItem 	Returns the text of a given item/subitem. [[br]]&quot;IsSelected&quot;, Item 	Returns 1 if the item is selected, otherwise returns 0. [[br]]&quot;Select&quot;, From [, To] 	Selects one or more items. [[br]]&quot;SelectAll&quot; 		Selects all items. [[br]]&quot;SelectClear&quot; 	Clears the selection of all items. [[br]]&quot;SelectInvert&quot; 	Inverts the current selection. [[br]]&quot;ViewChange&quot;, &quot;view&quot; 	Changes the current view. Valid views are &quot;list&quot;, &quot;details&quot;, &quot;smallicons&quot;, &quot;largeicons&quot;.</doc><example>Control.sendCommandListview(&quot;C:\\Program Files&quot;,&quot;SysListView321&quot;,&quot;Select&quot;, &quot;2&quot;, &quot;5&quot;);</example></function><function name="sendText" args="string strWindow, string strControl, string strKeys, bool bRaw" returns="bool bSuccess" impl="c++_au3"><doc>Send simulated keystrokes to a control (even if the window is not active). The string can include &lt;Shift&gt;, &lt;Control&gt;, &lt;Ctrl&gt;, &lt;Alt&gt;, as well as many others: {SPACE}, {ENTER}, {BACKSPACE}, {DELETE} (see Keyboard.send). &lt;Alt&gt; or &lt;Win&gt;, and other characters may not work equivalently to Keyboard.send.</doc></function><function name="setEnabled" args="string strWindow, string strControl, bool bEnabled" returns="bool bSuccess" impl="c++_au3"><doc>Set if a control is enabled or disabled, i.e. &quot;grayed out&quot;.</doc></function><function name="setFocus" args="string strWindow, string strControl" returns="bool bSuccess" impl="c++_au3"><doc>Sets focus to a given control on a window.</doc></function><function name="setText" args="string strWindow, string strControl, string strControlText" returns="bool bSuccess" impl="c++_au3"><doc>Sets text of control.</doc></function><function name="setVisible" args="string strWindow, string strControl, bool bVisible" returns="bool bSuccess" impl="c++_au3"><doc>Set if a control is visible or hidden.</doc></function></namespace><namespace name="Dialog"><namespace_doc>Dialogs for interacting with the user.</namespace_doc><function name="alert" args="string strTitle, string strText" returns="" impl="c++_winext"><doc>Display simple message box on the screen.</doc><example>Dialog.alert(&quot;Information&quot;,&quot;Hello, world&quot;);</example></function><function name="askColor" args="" returns="array rgb" impl="c++_winext"><doc>Opens Windows color picker. Returns results as r,g,b values from 0-255. Returns false if canceled or timeout.</doc></function><function name="askOkCancel" args="string strTitle, string strText" returns="Dialog.OK or Dialog.CANCEL" impl="c++_winext"><doc>Display simple message box on the screen, with options for ok and cancel.</doc><example>var res = Dialog.askOkCancel(&quot;Status&quot;,&quot;Continue?&quot;); if (res==Dialog.OK) doSomething(); else doSomethingElse();</example></function><function name="askYesNo" args="string strTitle, string strText" returns="Dialog.YES or Dialog.NO" impl="c++_winext"><doc>Display simple message box on the screen, with options for yes and no.</doc><example>var res = Dialog.askYesNo(&quot;Status&quot;,&quot;Continue?&quot;); if (res==Dialog.YES) doSomething(); else doSomethingElse();</example></function><function name="askYesNoCancel" args="string strTitle, string strText" returns="Dialog.YES;Dialog.NO;Dialog.CANCEL" impl="c++_winext"><doc>Display simple message box on the screen, with options for yes, no, cancel.</doc><example>var res = Dialog.askYesNoCancel(&quot;Warning&quot;,&quot;Replace existing file?&quot;); if (res==Dialog.YES) doSomething(); else if (res==Dialog.NO) doSomethingElse(); else doCancel();</example></function><function name="error" args="string strTitle, string strText" returns="" impl="c++_winext"><doc>Display simple message box on the screen, error icon.</doc></function><function name="input" args="string strTitle, string strPrompt, string strDefaultText=&quot;&quot;" returns="string strResult" impl="c++_winext"><doc>Opens input dialog for the user to type a response. Returns &apos;&apos; if user presses cancel.</doc></function><function name="openFile" args="string strFiletype=&quot;*&quot;, bool bMult=false, string strStartDir=&quot;.&quot;" returns="string strFile" impl="c++_winext"><doc>Opens standard Open File dialog. Provide type in format such as &apos;bmp&apos;, NOT &apos;*.bmp&apos;. If not multiple, returns string of filepath or false on cancel or timeout. If multiple, returns an array of strings: if the user chooses one file, ar[0] is the entire filepath and file name. if the user chooses &gt; one file, ar[0] is the directory, and ar[1] to the rest are only the file names.</doc></function><function name="saveFile" args="string strFiletype=&quot;*&quot;, string strStartDir=&quot;.&quot;" returns="string strFile" impl="c++_winext"><doc>Opens standard Save File dialog. Provide type in format such as &apos;bmp&apos;, NOT &apos;*.bmp&apos;. Returns string of filepath or false on cancel or timeout.</doc></function><function name="toolTip" args="string strText, int x=default, int y=default" returns="" impl="c++_au3"><doc>Creates a tooltip anywhere on the screen. If the x and y coordinates are omitted, the tip is placed near the mouse cursor. If the coords would cause the tooltip to run off screen, it is repositioned to visible. Tooltip appears until it is cleared, until script terminates, or sometimes until it is clicked upon. You may use a linefeed character to create multi-line tooltips.</doc><example>Dialog.toolTip(&quot;That&apos;s cool&quot;); Time.sleep(500); Dialog.toolTip(&quot;&quot;);</example></function><function name="warning" args="string strTitle, string strText" returns="" impl="c++_winext"><doc>Display simple message box on the screen, warning icon.</doc></function></namespace><namespace name="File"><namespace_doc>There are many functions in this namespace, but they should be self-explanatory. Note that File.readFile() and File.writeFile() are not intended for binary data, and the file cannot be larger than available memory.</namespace_doc><function name="cd" args="string strDirectory=&quot;&quot;" returns="bool bSuccess" impl="c++_qt"><doc>Change the current directory. This affects subsequent calls to functions that affect files. If no argument is given, returns the current working directory.</doc></function><function name="copy" args="string strFilename, string strCopyname" returns="bool bSuccess" impl="c++_qt"><doc>Create a copy of a file. Will not replace an existing file.</doc></function><function name="copyMany" args="string strSource, string strDestination, bool bSilent=false" returns="bool bStatus" impl="c++_nircmd"><doc>Copy an entire directory to another location. One can also copy many files, specifying &apos;*.txt&apos; to copy all text files in the current directory. May sometimes display a window.</doc><example>File.copyMany(&apos;c:\\temp\\folder1&apos;,&apos;c:\\othertemp\\folder1&apos;); /* copies entire folder. */ File.copyMany(&apos;c:\\temp\\*.*&apos;,&apos;d:\\destination&apos;);</example></function><function name="createDirectory" args="string strDirectory" returns="bool bSuccess" impl="c++_qt"><doc>Create an empty directory, by default in the current directory (which can be changed with File.cd() ).</doc></function><function name="createShortcut" args="string strFilename, string strTarget" returns="bool bSuccess" impl="c++_qt"><doc>Create a shortcut (.lnk on Windows). Will not replace an existing file.</doc><example>File.createShortcut(&apos;shortcut.lnk&apos;,&apos;c:\\program files\\my program\\program.exe&apos;);</example></function><function name="dirCountEntries" args="string strDirectory" returns="int nEntries" impl="c++_qt"><doc>Counts how many files and subfolders are in the folder.</doc></function><function name="dirListFiles" args="string strDir, string strTypes=&quot;*&quot;, string strSortBy=&quot;Unsorted&quot;" returns="arFiles" impl="c++_qt"><doc>Returns array of filenames inside folder. Provide a pattern like &apos;*.txt&apos; to only include .txt files. By default unsorted, but provide a flag such as &apos;unsorted&apos;, &apos;name&apos;,&apos;time&apos;,&apos;size&apos;,&apos;type&apos;. Includes files marked as hidden, but not those marked as system.</doc><example>var arFiles = File.dirListFiles(&apos;c:\\&apos;,&apos;*&apos;,&apos;size&apos;); print(&apos;biggest files in c:&apos;); arFiles.reverse(); for(var i=0;i&lt;arFiles.length;i++) print(arFiles[i]);</example></function><function name="dirListSubdirs" args="string strDir, string strSortBy=&quot;Unsorted&quot;" returns="arDirs" impl="c++_qt"><doc>Returns array of folder names that are subfolders of the folder. By default unsorted, but provide a flag such as &apos;unsorted&apos;, &apos;name&apos;,&apos;time&apos;,&apos;type&apos;. Includes files marked as hidden, but not those marked as system.</doc><example>var arFolders = File.dirListSubdirs(&apos;c:\\&apos;,&apos;name&apos;); print(&apos;subfolders in c:&apos;); for(var i=0;i&lt;arFolders.length;i++) print(arFolders[i]);</example></function><function name="driveMapAdd" args="string strDevice, string strRemoteShare, bool bAuthDialog=0, string strUser=&quot;&quot;, string strPass=&quot;&quot;" returns="bool bR" impl="c++_au3"><doc>Maps a network drive. strDevice is the device to map, for example &quot;O:&quot; or &quot;LPT1:&quot;, or &quot;&quot; which makes a connection that is not mapped to a specific drive, or &quot;*&quot; to select an unused drive letter. strRemoteShare, in form &quot;\\server\share&quot;. strUser, in form &quot;username&quot; or &quot;domain\username&quot;</doc><example>File.driveMapAdd(&quot;K:&quot;,&quot;\\\\myserver\\folder&quot;)</example></function><function name="driveMapAddPersistant" args="string strDevice, string strRemoteShare, bool bAuthDialog=0, string strUser=&quot;&quot;, string strPass=&quot;&quot;" returns="bool bR" impl="c++_au3"><doc>Maps a network drive. strDevice is the device to map, for example &quot;O:&quot; or &quot;LPT1:&quot;, or &quot;&quot; which makes a connection that is not mapped to a specific drive, or &quot;*&quot; to select an unused drive letter. strRemoteShare, in form &quot;\\server\share&quot;. strUser, in form &quot;username&quot; or &quot;domain\username&quot;</doc></function><function name="driveMapDialog" args="" returns="" impl="c++_winext"><doc>Opens standard &quot;Map Network Drive&quot; dialog.</doc></function><function name="driveMapDisconnect" args="string strDrive" returns="bool bSuccess" impl="c++_au3"><doc>Disconnects network drive. Provide drive letter &quot;X:&quot; or, if necessary, connection name &quot;\\server\share&quot;.</doc></function><function name="driveMapInformation" args="string strDrive" returns="string strInformation" impl="c++_au3"><doc>Retreives the details of a mapped drive. Returns details of the mapping, e.g. \\server\share. Returns number -1 upon failure.</doc><example>print(File.driveMapInformation(&apos;X:&apos;));</example></function><function name="emptyRecycleBin" args="string strDrive=&quot;&quot;" returns="bool bStatus" impl="c++_nircmd"><doc>Empty recycling bin. Optionally specify a drive, such as &quot;c:&quot;</doc><example>Screen.convertImages(&apos;c:\\myfolder\\*.bmp&apos;,&apos;.png&apos;) //converts all .bmp images in the folder to .png.</example></function><function name="exists" args="string strFile" returns="bool bExists" impl="c++_qt"><doc>Test if the file or directory exists.</doc></function><function name="getAbsPath" args="string strFilepath" returns="string strAbsPath" impl="c++_qt"><doc>Find absolute path from a relative path.</doc></function><function name="getPathHome" args="" returns="string strPath" impl="c++_qt"><doc>Return the directory of the current user&apos;s profile, typically something like C:/Documents and Settings/Username. If nothing is found, may fall back to c:\</doc></function><function name="getPathSpecial" args="SpecialFolder folder" returns="string strPath" impl="c++_winext"><doc>Get the path of a special folder, such as SpecialFolder.MyDocuments. See also openExplorerWindowSpecial. Example: File.getPathSpecial(SpecialFolder.AppData); Also: [[br]]SpecialFolder.AppData[[br]] SpecialFolder.AllUsers[[br]]SpecialFolder.Cookies[[br]]SpecialFolder.Desktop[[br]]SpecialFolder.Favorites[[br]]SpecialFolder.AppDataLocalSettings[[br]]SpecialFolder.MyDocuments[[br]]SpecialFolder.MyPictures[[br]]SpecialFolder.ProgramFiles[[br]]SpecialFolder.ProgramFilesCommon[[br]]SpecialFolder.RecentDocuments[[br]]SpecialFolder.StartMenu[[br]]SpecialFolder.StartupItems[[br]]SpecialFolder.System[[br]]SpecialFolder.Windows[[br]]</doc></function><function name="getPathTemp" args="" returns="string strPath" impl="c++_qt"><doc>Return the system&apos;s temporary directory.</doc></function><function name="getShortcutTarget" args="string strFilename" returns="string strTarget" impl="c++_qt"><doc>Find the target of a shortcut (.lnk on Windows).</doc><example>var strTarget = File.getShortcutTarget(&apos;shortcut.lnk&apos;); if (File.exists(strTarget)) print(&apos;target exists&apos;);</example></function><function name="getSize" args="string strFile" returns="int nSizeInBytes" impl="c++_qt"><doc>Returns the file size in bytes. (May not work for files &gt; 2 Gb in size).</doc></function><function name="getTimeAccessed" args="string strFile" returns="int nSecondsSince1970" impl="c++_qt"><doc>Returns the date and time when the file was last accessed, as an integer. (Seconds since 1970-01-01 UTC). On platforms where this information is not available, returns the same as Modified().</doc><example>var d = new Date(); d.setTime(File.getTimeAccessed(&apos;test.txt&apos;)*1000);</example></function><function name="getTimeCreated" args="string strFile" returns="int nSecondsSince1970" impl="c++_qt"><doc>Returns the date and time when the file was created, as an integer. (Seconds since 1970-01-01 UTC).</doc><example>var d = new Date(); d.setTime(File.getTimeCreated(&apos;test.txt&apos;)*1000);</example></function><function name="getTimeModified" args="string strFile" returns="int nSecondsSince1970" impl="c++_qt"><doc>Returns the date and time when the file was last modified, as an integer. (Seconds since 1970-01-01 UTC).</doc><example>var d = new Date(); d.setTime(File.getTimeModified(&apos;test.txt&apos;)*1000);</example></function><function name="iniDeleteSection" args="string strFilename, string strSection" returns="bool bSuccess" impl="c++_au3"><doc>Deletes a section from a standard format .ini file. Returns false if section is not found or if INI file is read-only.</doc></function><function name="iniDeleteVal" args="string strFilename, string strSection, string strKey" returns="bool bSuccess" impl="c++_au3"><doc>Deletes a value from a standard format .ini file. Returns false if section/key is not found or if INI file is read-only.</doc></function><function name="iniReadVal" args="string strFilename, string strSection, string strKey" returns="string strValue" impl="c++_au3"><doc>Reads a value from a standard format .ini file. If the key is not found, returns false. Reads 1024 bytes maximum.</doc></function><function name="iniWriteVal" args="string strFilename, string strSection, string strKey, string strValue" returns="bool bSuccess" impl="c++_au3"><doc>Writes a value to a standard format .ini file. If file does not exist, it is created. Keys and/or sections are added to the end and are not sorted in any way. Returns false if file is read-only.</doc></function><function name="isDirectory" args="string strFilepath" returns="bool bDirectory" impl="c++_qt"><doc>Test if it is a directory (folder).</doc></function><function name="isReadable" args="string strFile" returns="bool bReadable" impl="c++_qt"><doc>Test if the current user has read permissions for the file.</doc></function><function name="isWritable" args="string strFile" returns="bool bWritable" impl="c++_qt"><doc>Test if the current user has read permissions for the file.</doc></function><function name="openExplorerWindow" args="string strDirectory, bool bTreeView=false" returns="" impl="c++_winext"><doc>Opens new explorer window.</doc></function><function name="openExplorerWindowSpecial" args="SpecialFolder folder" returns="" impl="c++_winext"><doc>Open a folder in explorer, such as SpecialFolder.MyDocuments. See also getPathSpecial. Supports all available in File.getPathSpecial and also: [[br]]SpecialFolder.ControlPanel[[br]]SpecialFolder.Fonts[[br]]SpecialFolder.Printers[[br]]SpecialFolder.MyComputer[[br]]SpecialFolder.MyDocuments[[br]]SpecialFolder.MyNetworkPlaces[[br]]SpecialFolder.NetworkComputers[[br]]SpecialFolder.NetworkConnections[[br]]SpecialFolder.PrintersAndFaxes[[br]]SpecialFolder.RecycleBin[[br]]SpecialFolder.ScheduledTasks</doc></function><function name="pathJoin" args="string strPath, string strFilename" returns="string strCompletePath" impl="Javascript"><doc>(Write include(&apos;&lt;std&gt;&apos;) to import this function.) Combines a directory and filename to create a path. For example, File.pathJoin(&apos;c:\docs\foo\&apos;, &apos;test.txt&apos;) becomes &apos;c:\docs\foo\test.txt&apos;</doc></function><function name="pathSplit" args="string strPath" returns="[string strPath, string strFile]" impl="Javascript"><doc>(Write include(&apos;&lt;std&gt;&apos;) to import this function.) Splits a directory into two parts. 1) the path, and 2) the filename. For example, &apos;c:\docs\foo\test.txt&apos; to [&apos;c:\docs\foo\&apos;, &apos;test.txt&apos;]</doc></function><function name="readFile" args="string strFile, bool bTextMode=true" returns="string strContents" impl="c++_qt"><doc>Read text from a file. (Not recommended for binary files).Throws exception if file not found or is not readable. If bTextMode is true, \r\n characters on Windows are converted to \n</doc></function><function name="removeDirectory" args="string strDirectory" returns="bool bSuccess" impl="c++_qt"><doc>Remove an empty directory, by default in the current directory (which can be changed with File.cd() ).</doc></function><function name="removeFile" args="string strFilename" returns="bool bSuccess" impl="c++_qt"><doc>Delete a file. Returns false if delete does not succeed.</doc></function><function name="rename" args="string strFilename, string strNewname" returns="bool bSuccess" impl="c++_qt"><doc>Rename a file. Will not overwrite an existing file.</doc></function><function name="showInExplorer" args="string strFilename" returns="" impl="c++_winext"><doc>Opens new explorer window, and highlights file.</doc></function><function name="tray" args="string strDriveLetter, string strOpenOrClosed" returns="bool bSuccess" impl="c++_au3"><doc>Opens or closes the CD Tray. Provide the string &apos;open&apos; or &apos;closed&apos;. Drive letter in format &apos;D:&apos; or &apos;d:&apos;. Works as expected with virtual cd drives.</doc><example>File.tray(&apos;D:&apos;, &apos;open&apos;); File.tray(&apos;D:&apos;, &apos;closed&apos;);</example></function><function name="writeFile" args="string strFile, string strText, bool bAppend=false, bool bTextMode=true" returns="" impl="c++_qt"><doc>Write text to a file. (Not recommended for binary files). Throws exception if file is not writeable. If bTextMode is true, newline characters are converted according to platform.</doc></function></namespace><namespace name="Internet"><namespace_doc>More advanced methods, such as the ability to download a URL, will be added here soon. In the distant future, ftp support may be added.</namespace_doc><function name="ieClearTemporary" args="string strOption" returns="" impl="c++_qt"><doc>Clear Internet Explorer temporary files or settings. Options are &quot;Files&quot; (to delete temporary internet files), &quot;Cookies&quot; (to clear cookies), &quot;History&quot; (to clear history), &quot;Forms&quot;, &quot;Passwords&quot;, and &quot;All&quot;</doc></function><function name="ieFavorites" args="" returns="" impl="c++_qt"><doc>Opens Internet Explorer organize favorites dialog</doc></function><function name="openUrl" args="string strUrl" returns="" impl="Javascript"><doc>Opens URL in the default browser.</doc></function></namespace><namespace name="Keyboard"><namespace_doc>The reference documentation for Keyboard.send sums up what key events can be simulated. For example, one can use Keyboard.send(&apos;&lt;Control&gt;s&apos;) to simulate Control-S in a program. This is one of the most useful functions in LnzScript.[[br]]One can often use {TAB} to walk through the options in a dialog and {ENTER}. &lt;Alt&gt; is also useful for running menu-items or setting focus. ``Keyboard.send(&apos;&lt;Alt&gt;f&apos;); Keyboard.send(&apos;x&apos;);`` for example quits Notepad because Alt-F opens the File menu.</namespace_doc><function name="send" args="string strKeySequence" returns="" impl="c++_au3"><doc>Sends simulated keystrokes to the active window. The string can include &lt;Alt&gt;, &lt;Control&gt; or &lt;Cntrl&gt;, &lt;Shift&gt;, and &lt;Win&gt; as well as many others: {SPACE}, {ENTER}, {BACKSPACE}, {DELETE}, {UP}, {DOWN}, {LEFT}, {RIGHT}, {HOME}, {END}, {ESCAPE}, {INSERT}, {PGUP}, {PGDN}, {F1}-{F12}, {TAB}, {PRINTSCREEN}, {LWIN}, {RWIN}, {NUMLOCK on}, {CAPSLOCK off}, {SCROLLLOCK toggle}, {BREAK}, {PAUSE}, {NUMPAD0}, {NUMPADMULT}, {NUMPADADD}, {NUMPADSUB}, {NUMPADDIV}, {NUMPADDOT}, {NUMPADENTER}, {APPSKEY}, {LALT}, {RALT}, {LCTRL}, {RCTRL}, {LSHIFT}, {RSHIFT}, {SLEEP}, {ALTDOWN}, {SHIFTDOWN}, {CTRLDOWN}, {LWINDOWN}, {RWINDOWN}, {ASC nnnn}, {BROWSER_BACK}, {BROWSER_FORWARD}, {BROWSER_REFRESH}, {BROWSER_STOP}, {BROWSER_SEARCH}, {BROWSER_FAVORITES}, {BROWSER_HOME}, {VOLUME_MUTE}, {VOLUME_DOWN}, {VOLUME_UP}. Send {{} or {}} to send literal brace characters.</doc><example>Process.open(&apos;notepad.exe&apos;); Keyboard.send(&apos;hello&apos;); Keyboard.send(&apos;&lt;Control&gt;s&apos;); Keyboard.send(&apos;{UP}{DOWN}{TAB}{ENTER}&apos;); Keyboard.send(&apos;&lt;Control&gt;&lt;Shift&gt;f&apos;);</example></function><function name="sendAscii" args="int nAsciiCode" returns="" impl="c++_au3"><doc>Sends ascii value to active window.</doc></function><function name="sendRaw" args="string strKeySequence" returns="" impl="c++_au3"><doc>Sends simulated keystrokes to the active window.</doc><example>Keyboard.sendRaw(&apos;&lt;html&gt;&apos;);</example></function><function name="sendUnicode" args="int nUnicode" returns="" impl="c++_au3"><doc>Sends unicode value to active window.</doc></function><function name="setKeyDelay" args="int nKeyDelay" returns="" impl="c++_au3"><doc>Alters the the length of the brief pause in between sent keystrokes. Time in milliseconds to pause (default=5). Sometimes a value of 0 does not work; use 1 instead.</doc></function><function name="setKeyDownDuration" args="int nKeyDownDuration" returns="" impl="c++_au3"><doc>Alters the length of time a key is held down before released during a keystroke. For applications that take a while to register keypresses (and many games) you may need to raise this value from the default. Time in milliseconds to pause (default=1).</doc></function></namespace><namespace name="Mouse"><namespace_doc>It&apos;s pretty fun to be able to type ``Mouse.move(1,1)`` and watch the cursor move. LnzScript can also simulate mouse clicks, drags, and scroll-wheel.[[br]]However, the problem with using the mouse is that it recquires coordinates, and this can always be somewhat fragile. What if the window is in a different place from what you expected? It is recommended to use Keyboard or direct Control where possible.[[br]]what here[[br]]Note that Keyboard.send(&apos;&lt;Shift&gt;{F10}&apos;) can be used to simulate right-clicking on something that has focus.</namespace_doc><function name="click" args="int x=default, int y=default, bool bRelativeCds=false, string strBtn=&quot;left&quot;, int nSpeed=-1" returns="" impl="c++_au3"><doc>Moves cursor to x, y and sends simulated mouse click. If x and y are not specified sends mouseclick at current mouse position. If you specify bRelativeCds to be true, moves the cursor relative to window. You can pass the speed to move the mouse in the range 1 (fastest) to 100 (slowest). A speed of 0 will move the mouse instantly. Default speed is 10.</doc></function><function name="doubleClick" args="int x=default, int y=default, bool bRelativeCds=false, string strBtn=&quot;left&quot;, int nSpeed=-1" returns="" impl="c++_au3"><doc>Moves cursor to x, y and sends simulated mouse double-click. If x and y are not specified sends clicks at current mouse position. If you specify bRelativeCds to be true, moves the cursor relative to window. You can pass the speed to move the mouse in the range 1 (fastest) to 100 (slowest). A speed of 0 will move the mouse instantly. Default speed is 10.</doc></function><function name="drag" args="int x1, int y1, int x2, int y2, bool bRelativeCds=false, string strBtn=&quot;left&quot;, int nSpeed=-1" returns="" impl="c++_au3"><doc>Perform a mouse click and drag operation. If x and y are not specified sends mouseclick at current mouse position. If you specify bRelativeCds to be true, moves the cursor relative to window. You can pass the speed to move the mouse in the range 1 (fastest) to 100 (slowest). A speed of 0 will move the mouse instantly. Default speed is 10.</doc></function><function name="getCursor" args="" returns="int nCursorId" impl="c++_au3"><doc>Returns a cursor ID Number:[[br]]    0 = UNKNOWN (this includes pointing and grabbing hand icons)[[br]]    1 = APPSTARTING[[br]]    2 = ARROW[[br]]    3 = CROSS[[br]]    4 = HELP[[br]]    5 = IBEAM[[br]]    6 = ICON[[br]]    7 = NO[[br]]    8 = SIZE[[br]]    9 = SIZEALL[[br]]  10 = SIZENESW[[br]]  11 = SIZENS[[br]]  12 = SIZENWSE[[br]]  13 = SIZEWE[[br]]  14 = UPARROW[[br]]  15 = WAIT</doc></function><function name="getPosition" args="" returns="[int x, int y]" impl="c++_au3"><doc>Returns array of the current X and Y position of the mouse.</doc></function><function name="mouseDown" args="string strBtn=&quot;left&quot;" returns="" impl="c++_au3"><doc>Simulate mouseDown. For every mouseDown there should eventually be a corresponding mouseUp.</doc></function><function name="mouseUp" args="string strBtn=&quot;left&quot;" returns="" impl="c++_au3"><doc>Simulate mouseUp. For every mouseDown there should eventually be a corresponding mouseUp.</doc></function><function name="move" args="int x, int y, bool bRelativeCds=false, int nSpeed=10" returns="" impl="c++_au3"><doc>Moves the cursor. If you specify bRelativeCds to be true, moves the cursor relative to its current position. You can pass the speed to move the mouse in the range 1 (fastest) to 100 (slowest). A speed of 0 will move the mouse instantly. Default speed is 10.</doc></function><function name="setClickDelay" args="int nMilliseconds" returns="" impl="c++_au3"><doc>For simulated mouse clicks, alters the length of the brief pause in between mouse clicks. Time in milliseconds to pause (default=10).</doc></function><function name="setClickDownDelay" args="int nMilliseconds" returns="" impl="c++_au3"><doc>For simulated mouse clicks,Alters the length a click is held down before release. Time in milliseconds to pause (default=10).</doc></function><function name="setClickDragDelay" args="int nMilliseconds" returns="" impl="c++_au3"><doc>Alters the length of the brief pause at the start and end of a mouse drag operation. Time in milliseconds to pause (default=250).</doc></function><function name="wheel" args="int nDisplacement" returns="" impl="c++_au3"><doc>Moves mouse wheel up or down. Pass 2 to scroll up two, pass -2 to scroll down two, and so on.</doc></function></namespace><namespace name="Process"><namespace_doc>One key part of automation is opening a program. This would seem to be simple, but there are actually choices involved. Do you want the script to wait until the program is closed? Do you want to read from the command-line? Here are some ways to start another program:[[br]]- Process.open	-opens the program and *doesn&apos;t* wait for it to close[[br]]- Process.runAndWait	-opens the program and waits for it to close[[br]]- Process.runAndRead	-opens the program, reads stdout, and waits for it to close[[br]]- Process.runCmdLine	-runs command line like copy, del, rm, and waits for it to close[[br]]- Process.openFile	-open a file or URL with default program, doesn&apos;t wait for close[[br]]For programs that are in the Windows directory, you won&apos;t need the entire path. In other words, you can just type Process.open(&apos;calc.exe&apos;) or Process.open(&apos;notepad&apos;).</namespace_doc><function name="close" args="string strExecutableName" returns="" impl="c++_au3"><doc>Close a process. Names are executables without the full path, e.g., &quot;notepad.exe&quot; or &quot;winword.exe&quot;. If multiple processes have the same name, the one with the highest PID is terminated--regardless of how recently the process was spawned. PID is the unique number which identifies a Process. A PID is returned by the ProcessExists or Run commands.</doc></function><function name="closePID" args="int nPID" returns="" impl="c++_au3"><doc>Close a process. PID is the unique number which identifies a Process. A PID is returned by the ProcessExists or Run commands.</doc></function><function name="exists" args="string strExecutableName" returns="int nPID" impl="c++_au3"><doc>Checks to see if a process is running. Names are executables without the full path, e.g., &quot;notepad.exe&quot; or &quot;winword.exe&quot;. Returns the PID of the process, or 0 if process does not exist.</doc></function><function name="memoryDump" args="string strExecutableName, string strOutputFilename, int nStartAddress=0x00010000, int nBytesToRead=0x00002000, int nBytesPerLine=32, bool bIncludeHex=true, bool bIncludeAscii=true" returns="bool bStatus" impl="c++_nircmd"><doc>Saves memory dump of process to a file. Reads memory from a process and formats it in plain text. (Probably won&apos;t work in 64-bit mode). By default reads around 8k. Names are executables without the full path, e.g., &quot;notepad.exe&quot; or &quot;winword.exe&quot;.</doc></function><function name="open" args="string strExecutable, string strWorkingDir=&quot;&quot;, int nFlag=1" returns="int nPID" impl="c++_au3"><doc>Opens external program. After running the requested program the script continues (this is asynchronous). To pause execution of the script until the spawned program has finished use Process.runAndWait. Optionally pass a flag such as Window.HIDE, Window.SHOW, Window.MINIMIZE, Window.MAXIMIZE, or Window.RESTORE. Returns the PID of process or null upon failure.</doc></function><function name="openFile" args="string strFileOrUrlOrProgram, string strWorkingDir=&quot;&quot;" returns="" impl="c++_qt"><doc>Opens file, URL, or program with Windows shell (usually opens file in the default editor). After running the requested program the script continues (this is asynchronous).</doc></function><function name="runAndRead" args="string strExe, string strWorkingDir=&quot;&quot;, int nTimeoutMs=30000" returns="string strOutput" impl="c++_qt"><doc>Opens external program and reads its output from stdout. The script pauses until the program has closed. Throws exception if program cannot be found, and if process times out.</doc></function><function name="runAndWait" args="string strExe, string strWorkingDir=&quot;&quot;, int nFlag=1" returns="int nExitCode" impl="c++_au3"><doc>Opens external program. The script pauses until the program has closed. Optionally pass a flag such as Window.HIDE, Window.MINIMIZE, or Window.MAXIMIZE. Returns the exit code, or null upon failure.</doc></function><function name="runCmdLine" args="string strCommandLineCommand, string strWorkingDir=&quot;&quot;" returns="" impl="c++_qt"><doc>Execute command line command, in the style of the command prompt cmd.exe. As in the command prompt, you must use quotes if a file or directory has spaces in the name.</doc><example>Process.runCmdLine(&apos;mkdir &quot;c:\\program files\\myfolder&quot;&apos;);</example></function><function name="setPriority" args="string strExecutableName, int nPriorityLevel" returns="bool bSuccess" impl="c++_au3"><doc>Changes the priority of a process. 0=Idle/Low, 4=High, 5=Realtime (use with caution). Levels 1 and 3 not supported on Win95/98/ME.  Returns false upon failure. Names are executables without the full path, e.g., &quot;notepad.exe&quot; or &quot;winword.exe&quot;.</doc></function><function name="setServiceStartup" args="string strServiceName, string strStartupType" returns="bool bStatus" impl="c++_nircmd"><doc>Change startup type of a service or driver. Options are &quot;auto&quot;,&quot;manual&quot;, &quot;disabled&quot;, &quot;boot&quot; (for drivers), &quot;system&quot; (for drivers)</doc></function><function name="setServiceStatus" args="string strServiceName, string strAction" returns="bool bStatus" impl="c++_nircmd"><doc>Start or stop a service or driver. Actions are &quot;start&quot;,&quot;stop&quot;, &quot;restart&quot;, &quot;pause&quot;, &quot;continue&quot;.</doc><example>Process.setServiceStatus(&quot;MySql&quot;,&quot;restart&quot;); //restart Mysql service</example></function><function name="systemHibernate" args="bool bForce=false" returns="bool bStatus" impl="c++_nircmd"><doc>Puts computer in &quot;hibernate&quot; mode. Optionally specify true to &quot;force&quot;, which may result in unsaved data being lost.</doc></function><function name="systemLock" args="" returns="" impl="c++_nircmd"><doc>Lock computer.</doc></function><function name="systemLogoff" args="bool bForce=false" returns="bool bSuccess" impl="c++_au3"><doc>Log off current user. Optionally specify true to &quot;force&quot; logoff, which may result in unsaved data being lost. Returns false upon failure.</doc></function><function name="systemMonitorOff" args="bool bMonitorState" returns="" impl="c++_nircmd"><doc>Turn monitor off or on. Process.systemMonitorOff(false) to turn off. Process.systemMonitorOff(true) to turn on.</doc></function><function name="systemRefresh" args="" returns="" impl="c++_nircmd"><doc>Initiate a general system refresh. You can use this command to refresh your system after changing your system settings in the Registry (e.g: changing desktop icons size, environment variables, and so on..)</doc></function><function name="systemRefreshExplorer" args="" returns="" impl="c++_nircmd"><doc>Initiate a general refresh for Windows Explorer. This refresh command can be useful if you make a change in the Registry related to the shell file types (For example, if you change the icon of .gif extensio).</doc></function><function name="systemRestart" args="bool bForce=false" returns="bool bSuccess" impl="c++_au3"><doc>Restart computer. Optionally specify true to &quot;force&quot; restart, which may result in unsaved data being lost. Returns false upon failure.</doc></function><function name="systemScreensaver" args="" returns="" impl="c++_nircmd"><doc>Starts the default screen saver.</doc></function><function name="systemShutdown" args="bool bForce=false" returns="bool bSuccess" impl="c++_au3"><doc>Shuts down system. Optionally specify true to &quot;force&quot; shutdown, which may result in unsaved data being lost. Returns false upon failure.</doc></function><function name="systemStandby" args="bool bForce=false" returns="" impl="c++_nircmd"><doc>Puts computer in &quot;stand by&quot; mode. Optionally specify true to &quot;force&quot;, which may result in unsaved data being lost.</doc></function><function name="waitUntilClosed" args="string strExecutableName, int nTimeout=0" returns="bool bSuccess" impl="c++_au3"><doc>Wait until process is closed. Optional parameter nTimeout specifies how long to wait (default is to wait indefinitely). Returns false if timed out. Names are executables without the full path, e.g., &quot;notepad.exe&quot; or &quot;winword.exe&quot;.</doc></function><function name="waitUntilOpen" args="string strExecutableName, int nTimeout=0" returns="bool bSuccess" impl="c++_au3"><doc>Wait until process is open. Optional parameter nTimeout specifies how long to wait (default is to wait indefinitely). Returns false if timed out. Names are executables without the full path, e.g., &quot;notepad.exe&quot; or &quot;winword.exe&quot;.</doc></function></namespace><namespace name="Registry"><namespace_doc>Functions here should be self-explanatory.</namespace_doc><function name="deleteKey" args="string strKeyname" returns="int nResult" impl="c++_au3"><doc>Deletes a key from the registry. Returns 1 upon success, 0 if key doesn&apos;t exist, -1 if error deleting key. Deleting from the registry is potentially dangerous--please exercise caution! A registry key must start with &quot;HKEY_LOCAL_MACHINE&quot; (&quot;HKLM&quot;) or &quot;HKEY_USERS&quot; (&quot;HKU&quot;) or &quot;HKEY_CURRENT_USER&quot; (&quot;HKCU&quot;) or &quot;HKEY_CLASSES_ROOT&quot; (&quot;HKCR&quot;) or &quot;HKEY_CURRENT_CONFIG&quot; (&quot;HKCC&quot;).</doc><example>Registry.deleteKey(&quot;HKEY_LOCAL_MACHINE\\SOFTWARE\\MyKey&quot;)</example></function><function name="deleteVal" args="string strKeyname, string strValuename" returns="int nResult" impl="c++_au3"><doc>Deletes a value from the registry. Returns 1 upon success, 0 if key doesn&apos;t exist, -1 if error deleting key. To access the (Default) value use &quot;&quot; (a blank string) for the valuename. Deleting from the registry is potentially dangerous--please exercise caution! A registry key must start with &quot;HKEY_LOCAL_MACHINE&quot; (&quot;HKLM&quot;) or &quot;HKEY_USERS&quot; (&quot;HKU&quot;) or &quot;HKEY_CURRENT_USER&quot; (&quot;HKCU&quot;) or &quot;HKEY_CLASSES_ROOT&quot; (&quot;HKCR&quot;) or &quot;HKEY_CURRENT_CONFIG&quot; (&quot;HKCC&quot;).</doc><example>Registry.deleteKey(&quot;HKEY_LOCAL_MACHINE\\SOFTWARE&quot;, &quot;TestValue&quot;)</example></function><function name="listKeys" args="string strKeyname" returns="array astrSubkeys" impl="c++_au3"><doc>Reads the names of subkeys of the given key. Returns an array of strings, or null if the key cannot be found.</doc></function><function name="listVal" args="string strKeyname" returns="array astrValueNames" impl="c++_au3"><doc>Reads the names of values under the given key. Returns an array of strings, or null if the key cannot be found.</doc></function><function name="openRegedit" args="string strKeyname, string strValuename" returns="" impl="c++_nircmd"><doc>Open regedit to the specified key and value.</doc></function><function name="readVal" args="string strKeyname, string strValuename" returns="string strValue" impl="c++_au3"><doc>Read value from the registry. Returns string value upon success, and boolean false on failure. To access the (Default) value use &quot;&quot; (a blank string) for the valuename.  Supports registry keys of type REG_BINARY (returns hex string), REG_SZ, REG_MULTI_SZ (returns \\n delimited string), REG_EXPAND_SZ, and REG_DWORD. Cannot return more than 1024 bytes. A registry key must start with &quot;HKEY_LOCAL_MACHINE&quot; (&quot;HKLM&quot;) or &quot;HKEY_USERS&quot; (&quot;HKU&quot;) or &quot;HKEY_CURRENT_USER&quot; (&quot;HKCU&quot;) or &quot;HKEY_CLASSES_ROOT&quot; (&quot;HKCR&quot;) or &quot;HKEY_CURRENT_CONFIG&quot; (&quot;HKCC&quot;).</doc><example>var strProgFiles = Registry.readVal(&quot;HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion&quot;, &quot;ProgramFilesDir&quot;)</example></function><function name="writeVal" args="string strKeyname, string strValuename, string strValue, string strType=&quot;REG_SZ&quot;" returns="bool bSuccess" impl="c++_au3"><doc>Write value to registry. Returns false on failure. To access the (Default) value use &quot;&quot; (a blank string) for the valuename.  Supports registry keys of type REG_BINARY (use hex string such as &quot;01A9FF77&quot;), REG_SZ, REG_MULTI_SZ (provide \\n delimited string - with no blank entries), REG_EXPAND_SZ, and REG_DWORD. A registry key must start with &quot;HKEY_LOCAL_MACHINE&quot; (&quot;HKLM&quot;) or &quot;HKEY_USERS&quot; (&quot;HKU&quot;) or &quot;HKEY_CURRENT_USER&quot; (&quot;HKCU&quot;) or &quot;HKEY_CLASSES_ROOT&quot; (&quot;HKCR&quot;) or &quot;HKEY_CURRENT_CONFIG&quot; (&quot;HKCC&quot;).</doc><example>Registry.writeVal(&quot;&quot;HKEY_LOCAL_MACHINE\\SOFTWARE&quot;, &quot;TestKey&quot;, &quot;Hello this is a test&quot;); Registry.writeVal(&quot;&quot;HKEY_LOCAL_MACHINE\\SOFTWARE&quot;, &quot;TestKeyArray&quot;, &quot;Hello\\n this\\n is\\n a\\n test&quot;, &quot;REG_MULTI_SZ&quot;);</example></function></namespace><namespace name="Rename"><namespace_doc>Functions to help rename files.</namespace_doc><function name="rename" args="string strSearch, string strReplace" returns="bool bSuccess" impl="Javascript"><doc>Rename strings in filenames. Use include(&apos;&lt;std&gt;&apos;) to import this. Rename does the following: for each file in the current directory (File.cd()), replace in the filename. Doesn&apos;t rename subdirectories. If a file cannot be renamed, throws an exception and leaves other filenames unchanged.</doc><example>File.cd(@&apos;c:\mydir&apos;); Rename.rename(&apos;.htm&apos;, &apos;.html&apos;);</example></function><function name="renameFn" args="function fnRename, string strSorted=&apos;name&apos;" returns="bool bSuccess" impl="Javascript"><doc>Rename filenames. Use include(&apos;&lt;std&gt;&apos;) to import this. Provide a function that accepts a string and returns a string, the new name. Doesn&apos;t rename subdirectories. You can specify a sort order, which is useful when your function has state; this could be used to rename a set of files to 001, 002, 003... based on modification date. If a file cannot be renamed, throws an exception and leaves other filenames unchanged.</doc><example>File.cd(@&apos;c:\mydir&apos;); function myRename(s) {return &apos;new&apos;+s;} Rename.rename(myRename);</example></function><function name="renameFnPreview" args="function fnRename, string strSorted=&apos;name&apos;" returns="bool bSuccess" impl="Javascript"><doc>Rename filenames. Use include(&apos;&lt;std&gt;&apos;) to import this. Prints the results of what Rename.renameFn would do, without actually renaming the files. Useful for testing.</doc></function><function name="renamePreview" args="string strSearch, string strReplace" returns="bool bSuccess" impl="Javascript"><doc>Preview before rename strings in filenames. Use include(&apos;&lt;std&gt;&apos;) to import this. Prints the results of what Rename.rename would do, without actually renaming the files. Useful for testing.</doc></function></namespace><namespace name="Screen"><namespace_doc>Functions here should be self-explanatory.</namespace_doc><function name="convertImage" args="string strImageFilename, string strNewImageName" returns="bool bStatus" impl="c++_nircmd"><doc>Convert image file from one format from another. Image formats: .bmp, .gif, .png, .jpg, .tiff</doc></function><function name="convertImages" args="string strImagePattern, string strOutputPattern" returns="bool bStatus" impl="c++_nircmd"><doc>Convert image files from one format from another. See example. strImagePattern is pattern like &quot;*.bmp&quot; or &quot;a*.bmp&quot;. strOutputpattern is pattern like &quot;.png&quot;. Image formats: .bmp, .gif, .png, .jpg, .tiff</doc><example>Screen.convertImages(&apos;c:\\myfolder\\*.bmp&apos;,&apos;.png&apos;) //converts all .bmp images in the folder to .png.</example></function><function name="copyScreenshot" args="bool bFullScreen=false" returns="" impl="c++_au3"><doc>Copy screenshot to the clipboard. Defaults to screenshot of the active window, specify true to take screenshot of full screen.</doc></function><function name="getColor" args="int x, int y, bool bRelCds=false" returns="[int nR, int nG, int nB]" impl="c++_au3"><doc>Finds color of screen at coordinates. Returns array of r,g,b values (from 0 to 255), or null upon failure.</doc></function><function name="saveScreenshot" args="string strImageFilename, bool bFullScreen=false" returns="bool bStatus" impl="c++_nircmd"><doc>Save screenshot to an image file. Defaults to screenshot of the active window, specify true to take screenshot of full screen. Image formats: .bmp, .gif, .png, .jpg, .tiff</doc></function><function name="searchPixelColor" args="int nR,int nG,int nB,int nLeft,int nTop,int nRight,int nBtm,bool bRelCds=0,int nStep=0,int nDiff=0" returns="bool bR" impl="c++_au3"><doc>Search for color on screen. Returns coordinate at which color was found, or false. nStep - number of coordinates to walk with each step, make it larger for speed and less precision. nDiff - 0-255, are similar colors accepted? By default, 0, must be exact match. If given a value of 255, accepts different colors.</doc></function><function name="setDisplayMode" args="int nWidth, int nHeight, int nColorBits" returns="bool bStatus" impl="c++_nircmd"><doc>Changes display settings. nColorBits is the number of colors, for example 16-bit color or 24-bit color.</doc><example>Screen.displayMode(800,600,24); //set display to 800x600</example></function></namespace><namespace name="Sound"><namespace_doc>Functions here should be self-explanatory.</namespace_doc><function name="beep" args="int nFrequency=-1, int nDurationMilliseconds=500" returns="bool bStatus" impl="c++_nircmd"><doc>Plays a beep. If no frequency is given, plays standard Windows beep sound.</doc></function><function name="changeVolume" args="int nVolumeUnits, string strComponent=&quot;master&quot;" returns="bool bStatus" impl="c++_nircmd"><doc>Increase or decrease system volume. Units are in 1/100ths of maximum volume. Defaults to setting master volume, also specify one of the following: master, waveout, synth, cd, microphone, phone, aux, line, headphones, wavein</doc><example>Sound.changeVolume(-10); //get quieter Sound.changeVolume(10); //get louder</example></function><function name="mute" args="bool bMuted, string strComponent=&quot;master&quot;" returns="bool bStatus" impl="c++_nircmd"><doc>Mute or unmute the system volume. Defaults to setting master volume, also specify one of the following: master, waveout, synth, cd, microphone, phone, aux, line, headphones, wavein</doc></function><function name="playSound" args="string strSoundFile=&quot;Default&quot;" returns="" impl="c++_winext"><doc>Play a wave file or standard Windows sound. Pass in the filepath of a WAV file, or one of the following:[[br]]&quot;Asterisk&quot;[[br]]&quot;Default&quot;[[br]]&quot;Exclamation&quot;[[br]]&quot;Question&quot;[[br]]</doc><example>Sound.playSound(&apos;c:/this/mysound.wav&apos;); Sound.playSound(&apos;Welcome&apos;)</example></function><function name="setVolume" args="int nPercentageVolume, string strComponent=&quot;master&quot;" returns="bool bStatus" impl="c++_nircmd"><doc>Set system volume. Pass a percentage, where 0 is silent and 100 is maximum volume. Defaults to setting master volume, also specify one of the following: master, waveout, synth, cd, microphone, phone, aux, line, headphones, wavein</doc></function></namespace><namespace name="System"><namespace_doc>Functions here should be self-explanatory.</namespace_doc><function name="disableInput" args="" returns="" impl="c++_au3"><doc>Disables mouse and keyboard input from the user. The script can, however, still simulate most mouse and keyboard events. Note that this has different effects based on operating system (and apparently does nothing on Vista). Pressing Ctrl+Alt+Del will re-enable input.</doc></function><function name="enableInput" args="" returns="" impl="c++_au3"><doc>Enables mouse and keyboard input from the user after call to System.disableInput.</doc></function><function name="getenv" args="string strEnvironmentVariable" returns="string strValue" impl="c++_winext"><doc>Get environment variable, or false upon error.</doc></function><function name="installScreensaver" args="string strScreensaver" returns="" impl="c++_winext"><doc>Installs a screensaver. Tested on Windows XP. On Vista, simply opens Screensaver options and doesn&apos;t work.</doc></function><function name="isAdmin" args="" returns="bool bIsAdmin" impl="c++_au3"><doc>Returns true if the current user has administrator privileges.</doc></function><function name="openControlPanel" args="ControlPanel panelOption" returns="" impl="c++_winext"><doc>Opens a control panel, i.e System.openControlPanel(ControlPanel.Display). Type &quot;ControlPanel.&quot; in the editor and see autocomplete. Also, use System.openControlPanel(ControlPanelXp.Display) and so on for backwards compat. ControlPanel contains: Keyboard[[br]]Mouse[[br]]Joystick[[br]]Multimedia[[br]]InternetOptions[[br]]AddRemove[[br]]Regional[[br]]Time[[br]]System[[br]]Display[[br]]Accessibility[[br]]Network[[br]]Power[[br]]Accounts[[br]]SecurityCenter[[br]]Firewall[[br]]Wireless[[br]]Taskbar[[br]]FolderOptions[[br]]DeviceManager[[br]]Updates</doc><example>System.openControlPanel(ControlPanel.Display);</example></function><function name="openEjectHardware" args="" returns="" impl="c++_winext"><doc>Opens &quot;safely remove hardware&quot; dialog.</doc></function><function name="openUtility" args="string strOption" returns="" impl="c++_qt"><doc>Opens a system utility. Options include: [[br]]Disk Cleanup[[br]]Disk Management[[br]]Services[[br]]Computer Management[[br]]Administrative Tools[[br]]Event Viewer[[br]]</doc></function><function name="windowsVersion" args="" returns="string strVersion" impl="c++_winext"><doc>Returns a string representing the windows version. &apos;6.1&apos;-Windows7,&apos;6.0 Vista&apos;,&apos;5.1&apos;-WindowsXP, &apos;5.0&apos;-Windows2000,,&apos;5.2 Win server 2003&apos; and so on. See msdn for more information.</doc></function></namespace><namespace name="Time"><namespace_doc>Time.sleep() is used very frequently in scripts. It is used to pause the script, usually to wait for something to happen. You cannot open a program and instantaneously interact with it - you must give the program time to load! Time.sleep(500) waits for half of a second and is typically a reasonable value.</namespace_doc><function name="createTimer" args="" returns="timer objTimer" impl="Javascript"><doc>Use include(&apos;&lt;std&gt;&apos;) to import this function. Creates a timer object that can be used for timing a script. Call the check() method on the timer to see how many milliseconds have passed after the object was created.</doc><example>var timer = Time.createTimer(); for (var i=0; i&lt;30000; i++); print(&apos;number of ms:&apos;+timer.check());</example></function><function name="sleep" args="int nMilliseconds" returns="" impl="c++_au3"><doc>Pauses script for this amount of time.</doc></function></namespace><namespace name="Window"><namespace_doc>There are ways to interact with a window. In the reference, many of these functions take a first parameter &quot;string window&quot;. Here is what is meant by this. You just opened Calculator, maybe with Process.open(&apos;calc.exe&apos;), and you want to close the window. Here are the possible ways to refer to the window:[[br]]- ``Window.close(&apos;&apos;)``		Close the currently active window (when given empty string &apos;&apos;)[[br]]- ``Window.close(&apos;Calc&apos;)``			Close a window whose title starts with &quot;Calc&quot;[[br]]- ``Window.close(&apos;&quot;Calculator&quot;&apos;)``		Close a window whose title is exactly &quot;Calculator&quot;[[br]]- ``Window.close(&apos;%ulator%&apos;)``			Close any one window with title containing &quot;ulator&quot; [[br]]- ``Window.close({&apos;title&apos;:&apos;Calculator&apos;, &apos;class&apos;:&apos;SciCalc&apos;, &apos;instance&apos;:2})`` 	Close the 2nd instance of an open Calculator with the title &quot;Calculator&quot;[[br]]Note that in the last example an object (like a Python dict or Perl hash) was passed, not a string.</namespace_doc><function name="activate" args="string strWindow" returns="bool bSucess" impl="c++_au3"><doc>Activates (gives focus to) a window.</doc></function><function name="callMenuItem" args="string strWindow, string strMenu, string strMenuItem, string strSubmenuItem=&quot;&quot;" returns="bool bSucess" impl="c++_au3"><doc>Invokes a menu item of the window. Note that underlined menu items contain a &amp; character to indicate the underlining. Thus, the menu item File would actually require the text &quot;&amp;File&quot;, and Convert would require &quot;Con&amp;vert&quot;. will only work on standard menus. Unfortunately, many menus in use today are actually custom written or toolbars &quot;pretending&quot; to be menus.</doc></function><function name="close" args="string strWindow, bool bForce=false" returns="bool bSucess" impl="c++_au3"><doc>Closes a window. This function sends a close message to a window, the result depends on the window (it may ask to save data, etc.). To force a window to close, specify true (be warned that this will forcibly terminate the window if it doesn&apos;t close quickly enough, so a user might not have time to respond to dialogs prompting the user to save data). If multiple windows match the criteria, the window that was most recently active is closed.</doc></function><function name="exists" args="string strWindow" returns="bool bSucess" impl="c++_au3"><doc>Checks to see if a specified window exists.</doc></function><function name="getCaretPosition" args="bool bRelativeCoords=false" returns="int x, int y" impl="c++_au3"><doc>Returns the coordinates of the caret in the foreground window</doc></function><function name="getClassList" args="string strWindow" returns="string strClassList" impl="c++_au3"><doc>Retrieves the classes from a window, separated by \n (linefeed).</doc></function><function name="getDimensions" args="string strWindow, bool bOnlyClientArea=false" returns="int width, int height" impl="c++_au3"><doc>Returns the coordinates of the caret in the foreground window</doc><example>var desktopSize = Window.getDimensions(&apos;Program Manager&apos;); //size of desktop</example></function><function name="getPosition" args="string strWindow" returns="int x, int y" impl="c++_au3"><doc>Returns the coordinates of a window. Returns negative numbers such as -32000 for minimized windows.</doc></function><function name="getProcessId" args="string strWindow" returns="string strPID" impl="c++_au3"><doc>Retrieves the process ID of a window (as a string, use parseInt to convert it to a number).</doc></function><function name="getStatusbarText" args="string strWindow, int nPart=1" returns="string strStatusbarText" impl="c++_au3"><doc>Attempts to read the first standard status bar on a window (Microsoft common control: msctls_statusbar32). Some programs use their own status bars or special versions of the MS common control which StatusbarGetText cannot read. For example, StatusbarText does not work on the program TextPad, but Control.getText will work. Returns null upon failure.</doc></function><function name="getText" args="string strWindow" returns="string strText" impl="c++_au3"><doc>Retrieves the text from a window. Up to 16K can be retrieved.</doc></function><function name="getTitle" args="string strWindow" returns="string strTitle" impl="c++_au3"><doc>Retrieves the title from a window.</doc></function><function name="getWindowsHandle" args="string strWindow" returns="string strHandleId" impl="c++_au3"><doc>Retrieves the internal handle of a window (as a string, use parseInt to convert it to a number).</doc></function><function name="includeChildWindows" args="bool bInclude" returns="" impl="c++_au3"><doc>By default, only top-level windows are searched. Run Window.includeChildWindows(true) to be able to manipulate child windows as well.</doc></function><function name="isActive" args="string strWindow" returns="bool bSucess" impl="c++_au3"><doc>Checks to see if a specified window exists and is currently active.</doc></function><function name="isMaximized" args="string strWindow" returns="bool bMaximized" impl="c++_au3"><doc>Is a given window maximized.</doc></function><function name="isMinimized" args="string strWindow" returns="bool bMinimized" impl="c++_au3"><doc>Is a given window minimized.</doc></function><function name="maximize" args="string strWindow" returns="bool bSucess" impl="c++_au3"><doc>Maximize a window. For more operations, see window.setState.</doc></function><function name="minimize" args="string strWindow" returns="bool bSucess" impl="c++_au3"><doc>Minimize a window. For more operations, see window.setState.</doc></function><function name="minimizeAll" args="" returns="" impl="c++_au3"><doc>Minimizes all windows. Use restoreAll to restore.</doc></function><function name="move" args="string strWindow, int x, int y, int width=-1, int height=-1" returns="bool bSuccess" impl="c++_au3"><doc>Moves a window. Negative values for x and y are allowed - you can move a window off screen. Has no effect on minimized windows. You can optionally provide a new width and height to move and resize in one step.</doc></function><function name="resize" args="string strWindow, int width, int height" returns="bool bSuccess" impl="c++_au3"><doc>Resizes a window. Has no effect on minimized windows, but works on hidden windows. If width and height are small (or negative), the window will go no smaller than 112 x 27 pixels. The window will go no larger than the size of the desktop.</doc></function><function name="restore" args="string strWindow" returns="bool bSucess" impl="c++_au3"><doc>Restores a minimized or maximized window. For more operations, see window.setState.</doc></function><function name="restoreAll" args="" returns="" impl="c++_au3"><doc>Restores all windows after a call to minimizeAll.</doc></function><function name="setAlwaysOnTop" args="string strWindow, bool bOnTop=true" returns="bool bSucess" impl="c++_au3"><doc>Change a window&apos;s &quot;Always On Top&quot; attribute, so that it is above other windows.</doc></function><function name="setDelay" args="int nMillisecondsDelay" returns="" impl="c++_au3"><doc>By default, scripts pause for 250 ms after each successful window-related function. This delay can be changed.</doc></function><function name="setState" args="string strWindow, int nFlag" returns="bool bSucess" impl="c++_au3"><doc>Set state of a window (e.g. maximized, minimized). Pass a flag such as WindowStyle.hide, WindowStyle.show, WindowStyle.minimize, WindowStyle.maximize, or WindowStyle.restore.</doc></function><function name="setTitle" args="string strWindow, string strTitle" returns="bool bSucess" impl="c++_au3"><doc>Set title of window.</doc></function><function name="setTransparency" args="string strWindow, int nTransparency" returns="bool bSucess" impl="c++_au3"><doc>Set transparency, from 0 to 255. On Windows XP and later.</doc></function><function name="wait" args="string strWindow, int nTimeout=0" returns="bool bBeforeTimeout" impl="c++_au3"><doc>Pauses execution of the script until a window exists. Returns false if timed out. Polls for a window match every 250 milliseconds or so.</doc></function><function name="waitUntilActive" args="string strWindow, int nTimeout=0" returns="bool bBeforeTimeout" impl="c++_au3"><doc>Pauses execution of the script until a window is the active window. Returns false if timed out. Polls for a window match every 250 milliseconds or so.</doc></function><function name="waitUntilClosed" args="string strWindow, int nTimeout=0" returns="bool bBeforeTimeout" impl="c++_au3"><doc>Pauses execution of the script until a window is closed. Returns false if timed out. Polls for a window match every 250 milliseconds or so.</doc></function><function name="waitUntilNotActive" args="string strWindow, int nTimeout=0" returns="bool bBeforeTimeout" impl="c++_au3"><doc>Pauses execution of the script until a window is not active. Returns false if timed out. Polls for a window match every 250 milliseconds or so.</doc></function></namespace></section><section name="Language"><namespace name="(Global)"><namespace_doc>LnzScript adds functions to the global namespace: alert, confirm, include, print.[[br]]Use include(&apos;&lt;std.js&gt;&apos;) to add: printarr, printobj.</namespace_doc><function name="alert" args="string strMessage" returns="" impl="Javascript"><doc>Open a dialog box displaying message. See Dialog.alert, which can also specify a title.</doc></function><function name="confirm" args="string strMessage" returns="bool bResponse" impl="Javascript"><doc>Open a dialog box displaying message, with options for yes and no. Returns true if yes, and false if no. See also Dialog.askYesNo, which has more options.</doc></function><function name="escape" args="string strInput" returns="string strOutput" impl="Javascript"><doc>Replaces non-ascii characters in the string with hex escape sequences.</doc></function><function name="eval" args="string strCode" returns="Object objResult" impl="Javascript"><doc>Parse strCode and run it as a script. If the parse fails, generate a runtime error.</doc></function><function name="include" args="string strScriptFilename" returns="" impl="Javascript"><doc>Include a LnzScript file and execute it as if its contents were included directly. Use include(&apos;&lt;std&gt;&apos;) to include standard JavaScript code.</doc></function><function name="isArray" args="object obj" returns="" impl="Javascript"><doc>Returns true if the object is an array. Use include(&apos;&lt;std&gt;&apos;) to import this function.</doc></function><function name="isFinite" args="number input" returns="bool bIsFinite" impl="Javascript"><doc>Returns false if the input is NaN, positive infinity, or negative infinity. Returns true otherwise.</doc></function><function name="isFunction" args="object obj" returns="" impl="Javascript"><doc>Returns true if the object is a function. Use include(&apos;&lt;std&gt;&apos;) to import this function.</doc></function><function name="isNaN" args="number input" returns="bool bIsNotANumber" impl="Javascript"><doc>Returns true if the input is the value NaN, and false otherwise.</doc></function><function name="isNumber" args="object obj" returns="" impl="Javascript"><doc>Returns true if the object is a number or can be used as a number. Use include(&apos;&lt;std&gt;&apos;) to import this function.</doc></function><function name="parseFloat" args="string strDigits" returns="fResult" impl="Javascript"><doc>The parseFloat function turns a string representation of a floating-point number into a number.</doc></function><function name="parseInt" args="string strDigits, int nBase" returns="int nResult" impl="Javascript"><doc>The parseInt function turns a string representation of a number into an integer.</doc><example>parseInt(&apos;135&apos;,10) == 135 //base 10</example></function><function name="print" args="string strCode" returns="" impl="Javascript"><doc>Print string or any object to the screen.</doc></function><function name="printarr" args="array ar" returns="" impl="Javascript"><doc>Prints array, with indices. Use include(&apos;&lt;std&gt;&apos;) to import this function.</doc></function><function name="printobj" args="object obj" returns="" impl="Javascript"><doc>Prints object, with keys. Use include(&apos;&lt;std&gt;&apos;) to import this function.</doc></function><function name="prompt" args="string strPrompt" returns="string strResult" impl="Javascript"><doc>Open a dialog box in which the user can enter text. Returns &quot;&quot; if the user presses cancel. See also Dialog.input, which has more options.</doc></function><function name="unescape" args="string strInput" returns="string strOutput" impl="Javascript"><doc>Restores original string from escape() function</doc></function></namespace><namespace name="Array"><function name="concat" args="array ar2" returns="array arCombined" impl="Javascript" instance="true" ><doc>Returns an array consisting of the elements of the original array followed by elements of the second array. (Combines two arrays).</doc></function><function name="join" args="string strSeperator" returns="string strJoined" impl="Javascript" instance="true" ><doc>Combines an array of strings into one long string, delimited by seperator.</doc></function><function name="pop" args="" returns="value" impl="Javascript" instance="true" ><doc>The last element of the array is removed from the array and returned.</doc></function><function name="push" args="value" returns="int nLength" impl="Javascript" instance="true" ><doc>A new element is appended onto the end of the array. The new length of the array is returned.</doc></function><function name="reverse" args="" returns="array arReversed" impl="Javascript" instance="true" ><doc>Reverses order of items in array.</doc></function><function name="shift" args="" returns="value" impl="Javascript" instance="true" ><doc>The first element of the array is removed from the array and returned.</doc></function><function name="slice" args="int nStart, int nEnd" returns="array arSlice" impl="Javascript" instance="true" ><doc>Returns a new array that has elements from the slice of array.</doc><example>var a =[1,2,3,4,5]; b = a.slice(0,3); //1 2 3</example></function><function name="sort" args="function fnCompare=null" returns="array arSorted" impl="Javascript" instance="true" ><doc>Sorts elements of array. You can provide a custom comparison function. The comparison function should take 2 arguments, x,y, and return -1 if x&lt;y, 0 if x==y, or 1 if x&gt;y.</doc></function><function name="unshift" args="value" returns="" impl="Javascript" instance="true" ><doc>The value is prepended to the array, increasing the length by 1 and preserving the existing elements of the array.</doc></function></namespace><namespace name="Date"><function name=" new Date" args="int nYear, int nMonth, [int nDate, [int nHrs, [int nMins, [int nSec]]]]" returns="date objDate" impl="Javascript"><doc>Construct Date object</doc></function><function name="UTC" args="int nYear, int nMonth, [int nDate, [int nHrs, [int nMins, [int nSec]]]]" returns="int nUtc" impl="Javascript"><doc>Calculate utc (coordinated universal time)</doc></function><function name="getFullYear" args="" returns="year" impl="Javascript"><doc>Returns year of date. See specification for more Date methods such as getMonth, getSeconds...</doc></function><function name="getMilliseconds" args="" returns="milliseconds" impl="Javascript"><doc>Returns milliseconds. See specification for more Date methods such as getMonth, getSeconds...</doc></function><function name="getTime" args="" returns="int nMilliseconds" impl="Javascript"><doc>Returns time from Jan1,1970 in milliseconds. If time is before this date, can be negative.</doc></function><function name="parse" args="string strDate" returns="date dateOutput" impl="Javascript"><doc>Construct Date object from string</doc><example>var date = Date.parse(&apos;Janurary 7 1980&apos;);</example></function><function name="setFullYear" args="int nYear" returns="" impl="Javascript"><doc>Set year of date.  See specification for more Date methods such as setMonth, setSeconds...</doc></function><function name="setMilliseconds" args="int nMilliseconds" returns="" impl="Javascript"><doc>Returns milliseconds. See specification for more Date methods such as getMonth, getSeconds...</doc></function><function name="setTime" args="int nMilliseconds" returns="" impl="Javascript"><doc>Set time from Jan1,1970 in milliseconds. If time is before this date, can be negative.</doc></function><function name="toString" args="" returns="string strDate" impl="Javascript" instance="true" ><doc>Returns representation of date as a string.</doc><example>var date = Date.parse(&apos;Janurary 7 1980&apos;); var s = date.toString();</example></function></namespace><namespace name="Math"><function name="abs" args="input" returns="abs" impl="Javascript"><doc>Returns the absolute value of its argument (same magnitude but positive sign).</doc></function><function name="acos" args="input" returns="arcCosine" impl="Javascript"><doc>Compute arccosine.</doc></function><function name="asin" args="input" returns="arcSine" impl="Javascript"><doc>Compute arcsine.</doc></function><function name="atan" args="input" returns="arcTan" impl="Javascript"><doc>Compute arctangent.</doc></function><function name="atan2" args="y, x" returns="angleInRadians" impl="Javascript"><doc>Computes the angle in radians from the origin to the point (x,y).</doc></function><function name="ceil" args="input" returns="int nOutput" impl="Javascript"><doc>Rounds up to next integer.</doc></function><function name="cos" args="input" returns="fcos" impl="Javascript"><doc>Compute cosine.</doc></function><function name="exp" args="input" returns="exp" impl="Javascript"><doc>Compute e to the (argument) power.</doc></function><function name="floor" args="input" returns="int nOutput" impl="Javascript"><doc>Rounds down to an integer.</doc></function><function name="log" args="input" returns="naturalLog" impl="Javascript"><doc>Compute natural (base e) logarithm. To use another base, use Math.log(x)/Math.log(base)</doc></function><function name="max" args="a, b" returns="max" impl="Javascript"><doc>Returns larger of the arguments.</doc></function><function name="min" args="a, b" returns="min" impl="Javascript"><doc>Returns smaller of the arguments.</doc></function><function name="pow" args="x, power" returns="result" impl="Javascript"><doc>Returns x raised to a power.</doc></function><function name="random" args="" returns="fRandom" impl="Javascript"><doc>Returns pseudo-random between 0 and 1. The value is greater than or equal to 0 and less than 1.</doc></function><function name="round" args="input" returns="int nOutput" impl="Javascript"><doc>Rounds to the closest integer. Also, if input is 3.5, rounds up to 4, and so on.</doc></function><function name="shuffleArray" args="array arr" returns="" impl="Javascript" instance="true" ><doc>Shuffles (randomizes) order of elements in array. Use include(&apos;&lt;std&gt;&apos;) to import this function. Fisher-Yates algorithm. Note that apparently, initial random seed of lnzScript is the same, which is due to Qt library used.</doc></function><function name="sin" args="input" returns="fsin" impl="Javascript"><doc>Compute sine.</doc></function><function name="sqrt" args="input" returns="sqrt" impl="Javascript"><doc>Compute square root.</doc></function><function name="tan" args="input" returns="ftan" impl="Javascript"><doc>Compute tangent.</doc></function></namespace><namespace name="Number"><function name="toExponential" args="" returns="string strNumber" impl="Javascript" instance="true" ><doc>Return number in exponential form (scientific notation).</doc></function><function name="toFixed" args="int nDigits" returns="string strNumber" impl="Javascript" instance="true" ><doc>Convert number to string, with given number of decimal digits.</doc><example>var n = 1.55555; print(n.toFixed(2));</example></function><function name="toPrecision" args="int nDigits" returns="string strNumber" impl="Javascript" instance="true" ><doc>Return number with precision (uses rounding and scientific notation as necessary).</doc></function><function name="toString" args="int nBase=10" returns="string strNumber" impl="Javascript" instance="true" ><doc>Convert number to string, in the given base.</doc></function></namespace><namespace name="RegExp"><function name=" new RegExp" args="string strPattern, string strFlags=&quot;&quot;" returns="RegExp re" impl="Javascript"><doc>Creates RegExp object. Alternatively use the syntax /pattern/g instead of new RegExp(&apos;pattern&apos;,&apos;g&apos;); Flags can include g (global), i (ignoreCase), m (multiline, anchors match at lines)</doc></function><function name="exec" args="string strString" returns="array arResults" impl="Javascript" instance="true" ><doc>Performs regex match on string, and returns an array of results. The first element of the array is the found string, and the remaining are captured subgroups.</doc><example>var re=/(\d+),(\d+)/; var a = re.exec(&apos;12-2456&apos;); //item 1 is 12, item 2 is 2456</example></function></namespace><namespace name="String"><function name="charAt" args="int nIndex" returns="string strCharacter" impl="Javascript" instance="true" ><doc>Returns string containing character at position pos (where 0 refers to the first character).</doc><example>var s = &quot;hello&quot;; var h = s.charAt(0);</example></function><function name="charCodeAt" args="int nIndex" returns="int nUnicode" impl="Javascript" instance="true" ><doc>Returns unicode or ascii value of character at position pos (where 0 refers to the first character).</doc></function><function name="contains" args="string strSmallerString" returns="bool bContains" impl="Javascript" instance="true" ><doc>Tests if string contains a certain substring. Use include(&apos;&lt;std&gt;&apos;) to import this function.</doc></function><function name="endsWith" args="string strSmallerString" returns="bool bEndsWith" impl="Javascript" instance="true" ><doc>Tests if string ends with a certain substring. Use include(&apos;&lt;std&gt;&apos;) to import this function.</doc></function><function name="fromCharCode" args="int nUnicode" returns="string strCharacter" impl="Javascript"><doc>Returns a string value, converting arguments into characters.</doc><example>var a = String.fromCharCode(97);</example></function><function name="indexOf" args="string strSearch, int nPosition=0" returns="int nIndex" impl="Javascript" instance="true" ><doc>Searches for strSearch inside the string, and returns the index at which it is found. If the string is not found, -1 is returned. Provide a position to specify an index to start searching at.</doc><example>var s = &quot;what is the difference&quot;; if (s.indexOf(&apos;the&apos;)!=-1) print(&apos;the sentence contained &quot;the&quot;&apos;);</example></function><function name="lastIndexOf" args="string strSearch, int nPosition=nLength" returns="int nIndex" impl="Javascript" instance="true" ><doc>Searches for strSearch backwards (from right to left) inside the string, and returns the index at which it is found. If the string is not found, -1 is returned. Provide a position to specify an index to start searching at.</doc></function><function name="match" args="RegExp re" returns="string strFound" impl="Javascript" instance="true" ><doc>Matches regular expression. Returns string matched if successful. If no match, returns null.</doc><example>var re=/(a)(b)/; print(s.replace(re, &apos;$2$1&apos;)); //replaces ab with ba in the string.</example></function><function name="replace" args="RegExp re, string strReplaceValue/function fnReplace" returns="string strResult" impl="Javascript" instance="true" ><doc>Use regular expression to replace in string. If regular expression is global, such as /a/g, then replaces all instances. Replacement string can contain $0, referring to matched string, or $1, referring to first match group and so on. Replacement function, if given, will be passed string, and is expected to return a string.</doc></function><function name="replace" args="string strFind, string strReplaceValue" returns="string strResult" impl="Javascript" instance="true" ><doc>Replace one instance of strFind with strReplaceValue. Note that if a regular expression is passed, behavior is different.</doc></function><function name="search" args="RegExp re" returns="int nIndex" impl="Javascript" instance="true" ><doc>Searches for regular expression in string. If found, returns position in string, otherwise returns -1.</doc></function><function name="slice" args="int nStart, int nEnd" returns="string strSlice" impl="Javascript" instance="true" ><doc>Return substring from nStart to nEnd. If start is negative, it is treated as (sourceLength+start) where sourceLength is the length of the string. If end is negative, it is treated as (sourceLength+end) where sourceLength is the length of the string.</doc></function><function name="split" args="string strSeperator" returns="array arSplit" impl="Javascript" instance="true" ><doc>Splits input string into an array of substrings. Call .split(&apos;&apos;) to split into characters. A RegExp object can also be passed.</doc><example>var s = &quot;what is the difference&quot;; var arWords = s.split(&apos; &apos;); //splits into array of words</example></function><function name="startsWith" args="string strSmallerString" returns="bool bStartsWith" impl="Javascript" instance="true" ><doc>Tests if string starts with a certain substring. Use include(&apos;&lt;std&gt;&apos;) to import this function.</doc></function><function name="strip" args="" returns="string strStripped" impl="Javascript" instance="true" ><doc>Removes whitespace from beginning and end of string, similarly to the traditional strip() or trim(). Use include(&apos;&lt;std&gt;&apos;) to import this function.</doc></function><function name="substring" args="int nStart, int nEnd=nLength" returns="array arSplit" impl="Javascript" instance="true" ><doc>Return substring of the input. If an end index is not provided, returns the string from the nth position to the end of the string.</doc><example>var s = &quot;abcdefg&quot;; var sSlice = s.substring(0,3); //abc</example></function><function name="toLowerCase" args="" returns="string strLower" impl="Javascript" instance="true" ><doc>Convert string to lower case.</doc></function><function name="toUpperCase" args="" returns="string strUpper" impl="Javascript" instance="true" ><doc>Convert string to upper case.</doc></function></namespace></section></launchorzdoc>