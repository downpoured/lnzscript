LnzEditor Plans
=================


One complete build script ?
specify directories for python scripts.


For 0.4 release
---------------------
Create "clipboard", 5th screen-cast ?

Join together Dialog.alert, Dialog.error, Dialog.warning
Join together Dialog.askYesNo, askYesNoCancel
Goal: less memory usage, smaller api, smaller binary



Docviewer, on untitled document, doesn't see the subsystem=2 and runs in subsystem 1 or something.
Works fine on titled documents

passing arguments to a run command
		should be able to just write command.go.*.py=pythonw -u "$(FileNameExt)" $(args)
		which should add quoting of arguments, and just as many arguments as needed		
			"allparams" property - preliminary, but doesn't work yet.
			- see rev. 286
		Better solution: if arg is empty string, don't add it. if arg is "" (two quotes), then add empty string as argument

Editor feature
	Onkey, keep track of cursor position.
	Then, when pressing Control-Hyphen (Ctrl-) you can go back, like in Vs2005

Bugs
	For System.openControlPanel and related, make options non-case sensitive. 
	See System.openControlPanel to see Vista changes in comments


Testing
	minor bug in File.ini* for return values, returns true even if false - verify fix

Features
	Python zip, url
	Create api file, autocomplete for Python (for module-level functions)


Features
	Investigate DllCall method
	
	Create a new File.createShortcut that can handle 
		File.createShortcut only works for simple shortcuts. Will have to use winapi
		http://64.233.167.104/search?q=cache:5RhesI33NygJ:www.codeproject.com/KB/winsdk/makelink.aspx+windows+api+create+shortcut&hl=en&ct=clnk&cd=1&gl=us

	add a way to detect the Python directory
		this could be done with an lnzscript .js file
		findpython.js searches for c:\python30\python.exe, c:\python21\Python.exe, until match
		then writes a text file like _pythondir.properties
		note that "import nonexistantfile" doesn't show an error
	
	passing arguments to a run command
		should be able to just write command.go.*.py=pythonw -u "$(FileNameExt)" $(args)
		which should add quoting of arguments, and just as many arguments as needed

	Add more dialogs
		Dialog.input - initial focus to input box
		Dialog.choice, perhaps choosing from a handful of items.
		Would be good for smartwin++ if it didn't look so ugly.
		Consider Dialog.openFolder, which Smartwin++ can add easily
		Dialog.choice http://smartwinlib.org/doc/class_choice_string.html\
		http://smartwinlib.org/doc/class_in_dialog.html
		
	

	Installer
		Optionally (on by default?) associates .js files with the editor.



For 0.5? release
---------------------
Bugs

	in the Options menu, only 2 languages are included regardless of settings. not elegant
	
Documentation - consistent usage of "folder" or "directory"
consistent usage of return values - false or null or -1?

Cleanup
	make g_nircmd_directory string a static member, not a global variable
	add "licenses" directory in output
	
	note Internet.openUrl is in provide_script.cpp, not very elegant.


Long term
-------------

Features
	ftp, via Python

The Launchor
	a fork of launchy that doesn't have to index at all

Editor
	context help-lua or something looks at the words you are at, and opens the doc browser to that word
	(this isn't easy with the current doc-viewer, although Scite already has the capability)
	
	Ctrl+; and Ctrl+. are set by user.shortcuts, instead of in the C++ code. Maybe slightly less good.
	
	Document IDM changes/additions, provide them to Lua with the .iface file


Scite Modifications
	scite with Python instead of Lua
	
	Scite recognizes a special comment specifying "Run command". A file can, in the first line, provide a command, such as "//# Runcommand:`run main.py`" 
	
	announce to scite-interest list
	
64 bit version
	nircmd is 32, but that shouldn't cause any problems.
	things blocking this:
	scite_msg.cpp, reads in, atol to long, which won't be 64 bit
	wincommondialog, at least would want to check
	not enough time to thoroughly test.
	summary: no major advantage to 64 bit mode for this project.
	
	









