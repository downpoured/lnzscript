# Change these settings to your content

#set to 0 to turn off. 
enable_js_calltips=1
enable_js_autocomplete=1

# Define SciTE settings for JavaScript files.

file.patterns.js=*.js;*.jsz
filter.js=JavaScript (js)|$(file.patterns.js)|
lexer.$(file.patterns.js)=cpp



# API and lnzscript information
api.$(file.patterns.js)=$(SciteDefaultHome)\properties\lnzscript.api

#note that these are per-lexer settings
autocomplete.choose.single=0
autocomplete.cpp.ignorecase=0
autocomplete.cpp.start.characters=.
autocomplete.cpp.fillups=

calltip.cpp.ignorecase=0
calltip.cpp.word.characters=._$(chars.alpha)
#calltip.cpp.parameters, the default settings are fine

#to display newline in definitions. It's not a big improvement, but looks fine
calltip.cpp.end.definition=)

# javascript can have $ in function names
lexer.cpp.allow.dollars=1

#~ if enable_js_calltips
	#~ calltip.cpp.word.characters=$(chars.alpha)$(chars.numeric)_
#~ if enable_js_autocomplete
	#~ #autocomplete.cpp.fillups=(



statement.indent.$(file.patterns.js)=5 function case default do else for if while try catch

# This is for a case like "if (mycondition) i=3;<enter>" It detects 
# However, this is left off by default because it interferes with for loop for some reason
#statement.end.$(file.patterns.js)=10 ;

statement.lookback.$(file.patterns.js)=20
block.start.$(file.patterns.js)=10 {
block.end.$(file.patterns.js)=10 }










#keywordclass - for keywords
#keywordclass2 - for highlighting user defined keywords or function calls or similar
#keywordclass3 - for doc comment keywords, highlighted in style 17

# Many of this reserved 

keywordclass.javascript=abstract boolean break byte case catch char class \
const continue debugger default delete do double else enum export extends \
final finally float for function goto if implements import in instanceof \
int interface long native new package private protected public \
return short static super switch synchronized this throw throws \
transient try typeof var void volatile while with
keywords.*.js=$(keywordclass.javascript)


keywordclass2.javascript=print include alert confirm \
Clipboard Control Dialog File Internet Keyboard Mouse Process Registry Screen Sound System Time Window Array Date Math Number RegExp String

keywords2.*.js=$(keywordclass2.javascript)




command.go.$(file.patterns.js)="$(lnzscite.lnzlocation)" /f "$(FileNameExt)" "$(1)" "$(2)" "$(3)" "$(4)"
command.go.subsystem.$(file.patterns.js)=0

#Tools:

command.name.10.$(file.patterns.js)=For loop expand
command.10.$(file.patterns.js)=dofile $(SciteDefaultHome)\properties\forloop.lua
command.shortcut.10.$(file.patterns.js)=Ctrl+0
# don't save before running
command.save.before.10.$(file.patterns.js)=2
command.subsystem.10.$(file.patterns.js)=3



#Styles:

# Default
style.cpp.32=$(font.base)
# White space
style.cpp.0=fore:#808080
# Comment: /* */.
style.cpp.1=$(colour.code.comment.box),$(font.code.comment.box)
# Line Comment: //.
style.cpp.2=$(colour.code.comment.line),$(font.code.comment.line)
# Doc comment: block comments beginning with /** or /*!
style.cpp.3=$(colour.code.comment.doc),$(font.code.comment.doc)
# Number
style.cpp.4=$(colour.number)
# Keyword
style.cpp.5=$(colour.keyword),bold
# Double quoted string
style.cpp.6=$(colour.string)
# Single quoted string
style.cpp.7=$(colour.char)
# UUIDs (only in IDL)
style.cpp.8=fore:#804080
# Preprocessor
style.cpp.9=$(colour.preproc)
# Operators
style.cpp.10=$(colour.operator),bold
# Identifiers
style.cpp.11=
# End of line where string is not closed
style.cpp.12=fore:#000000,$(font.monospace),back:#E0C0E0,eolfilled
# Verbatim strings for C#
style.cpp.13=fore:#007F00,$(font.monospace),back:#E0FFE0,eolfilled
# Regular expressions for JavaScript
style.cpp.14=fore:#3F7F3F,$(font.monospace),back:#E0F0FF,eolfilled
# Doc Comment Line: line comments beginning with /// or //!.
style.cpp.15=$(colour.code.comment.doc),$(font.code.comment.doc)
# Keywords2
style.cpp.16=fore:#B00040
# Comment keyword
style.cpp.17=fore:#3060A0,$(font.code.comment.doc)
# Comment keyword error
style.cpp.18=fore:#804020,$(font.code.comment.doc)
# Braces are only matched in operator style
braces.cpp.style=10


#These are per-lexer settings: (The lexer used is called cpp)

comment.block.cpp=//~
#comment.block.at.line.start.cpp=1
comment.stream.start.cpp=/*
comment.stream.end.cpp=*/
comment.box.start.cpp=/*
comment.box.middle.cpp= *
comment.box.end.cpp= */
#fold.at.else=1
